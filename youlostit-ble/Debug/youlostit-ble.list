
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004d24  08004d24  00005d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  000061bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004f5c  08004f5c  00005f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f64  08004f64  000061bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f64  08004f64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f68  08004f68  00005f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08004f6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001bc  08005128  000061bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08005128  000064c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5f3  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002245  00000000  00000000  000117df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00013a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d2  00000000  00000000  000144b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002772d  00000000  00000000  00014c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb92  00000000  00000000  0003c3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1293  00000000  00000000  00047f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001391dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  00139220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  0013c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001bc 	.word	0x200001bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d0c 	.word	0x08004d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c0 	.word	0x200001c0
 80001cc:	08004d0c 	.word	0x08004d0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fbb8 	bl	80039fc <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fc62 	bl	8001ba0 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fb93 	bl	8003a0c <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa9d 	bl	8000830 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fb7c 	bl	8003a0c <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa86 	bl	8000830 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fb50 	bl	8003a0c <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2305      	movs	r3, #5
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb20 	bl	80009bc <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fb3c 	bl	8003a0c <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa46 	bl	8000830 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fb25 	bl	8003a0c <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa2f 	bl	8000830 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fb0e 	bl	8003a0c <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa18 	bl	8000830 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 faf7 	bl	8003a0c <free>
 
	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f989 	bl	8000734 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa4e 	bl	80008c8 <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa7e 	bl	8000938 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa76 	bl	8000938 <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002f0 	.word	0x200002f0
 8000458:	200002f4 	.word	0x200002f4
 800045c:	20000000 	.word	0x20000000
 8000460:	200002ee 	.word	0x200002ee
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001d8 	.word	0x200001d8
 8000478:	200001dc 	.word	0x200001dc
 800047c:	200001e0 	.word	0x200001e0
 8000480:	20000118 	.word	0x20000118
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002e4 	.word	0x200002e4
 80004a0:	20000120 	.word	0x20000120
 80004a4:	200002ec 	.word	0x200002ec
 80004a8:	20000140 	.word	0x20000140
 80004ac:	200002e8 	.word	0x200002e8
 80004b0:	20000130 	.word	0x20000130

080004b4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }
 
 int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fe65 	bl	80021a0 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 fb5f 	bl	8001ba0 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fe71 	bl	80021d0 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fef7 	bl	80032f0 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fe61 	bl	80021d0 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fb46 	bl	8001ba0 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fe58 	bl	80021d0 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 fede 	bl	80032f0 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	   dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 febf 	bl	80032f0 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fe22 	bl	80021d0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fe17 	bl	80021d0 <HAL_GPIO_WritePin>
		 return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08004d24 	.word	0x08004d24
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002f8 	.word	0x200002f8
 80005c4:	200002f4 	.word	0x200002f4

080005c8 <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			 return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 8000606:	2300      	movs	r3, #0
 }
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fdcb 	bl	80021d0 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fe51 	bl	80032f0 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fccc 	bl	8003006 <HAL_SPI_Transmit>
		 result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000678:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fda5 	bl	80021d0 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>
 
 }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08004d2c 	.word	0x08004d2c
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002f8 	.word	0x200002f8
 80006a8:	200002f4 	.word	0x200002f4

080006ac <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006b6:	217f      	movs	r1, #127	@ 0x7f
 80006b8:	4819      	ldr	r0, [pc, #100]	@ (8000720 <catchBLE+0x74>)
 80006ba:	f7ff fefb 	bl	80004b4 <fetchBleEvent>
 80006be:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d128      	bne.n	8000718 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c6:	2203      	movs	r2, #3
 80006c8:	4916      	ldr	r1, [pc, #88]	@ (8000724 <catchBLE+0x78>)
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <catchBLE+0x74>)
 80006cc:	f7ff ff7c 	bl	80005c8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006d0:	2205      	movs	r2, #5
 80006d2:	4915      	ldr	r1, [pc, #84]	@ (8000728 <catchBLE+0x7c>)
 80006d4:	4812      	ldr	r0, [pc, #72]	@ (8000720 <catchBLE+0x74>)
 80006d6:	f7ff ff77 	bl	80005c8 <checkEventResp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <catchBLE+0x74>)
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <catchBLE+0x80>)
 80006e8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <catchBLE+0x74>)
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <catchBLE+0x80>)
 80006f2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 80006f4:	2205      	movs	r2, #5
 80006f6:	490e      	ldr	r1, [pc, #56]	@ (8000730 <catchBLE+0x84>)
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <catchBLE+0x74>)
 80006fa:	f7ff ff65 	bl	80005c8 <checkEventResp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d109      	bne.n	8000718 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <catchBLE+0x74>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	b21a      	sxth	r2, r3
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <catchBLE+0x80>)
 800070c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800070e:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <catchBLE+0x74>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	b21a      	sxth	r2, r3
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <catchBLE+0x80>)
 8000716:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001e4 	.word	0x200001e4
 8000724:	200000f0 	.word	0x200000f0
 8000728:	200000fc 	.word	0x200000fc
 800072c:	20000150 	.word	0x20000150
 8000730:	20000104 	.word	0x20000104

08000734 <setConnectable>:
 
 void setConnectable(){
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 		uint8_t* rxEvent;
 		//Start advertising
 		uint8_t *localname;
 		int res;
 		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800073a:	200a      	movs	r0, #10
 800073c:	f003 f95e 	bl	80039fc <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	60fb      	str	r3, [r7, #12]
 		memcpy(localname,deviceName,sizeof(deviceName));
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a36      	ldr	r2, [pc, #216]	@ (8000820 <setConnectable+0xec>)
 8000748:	6810      	ldr	r0, [r2, #0]
 800074a:	6018      	str	r0, [r3, #0]
 800074c:	7912      	ldrb	r2, [r2, #4]
 800074e:	711a      	strb	r2, [r3, #4]
 		localname[sizeof(deviceName)+1]=0x00;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3306      	adds	r3, #6
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+2]=0x00;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3307      	adds	r3, #7
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+3]=0x00;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3308      	adds	r3, #8
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+4]=0x00;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3309      	adds	r3, #9
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)]=0x00;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3305      	adds	r3, #5
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]


 		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <setConnectable+0xf0>)
 800077a:	2206      	movs	r2, #6
 800077c:	72da      	strb	r2, [r3, #11]
 		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <setConnectable+0xf0>)
 8000780:	2213      	movs	r2, #19
 8000782:	70da      	strb	r2, [r3, #3]

 		uint8_t *discoverableCommand;
 		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000784:	2017      	movs	r0, #23
 8000786:	f003 f939 	bl	80039fc <malloc>
 800078a:	4603      	mov	r3, r0
 800078c:	60bb      	str	r3, [r7, #8]
 		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4a24      	ldr	r2, [pc, #144]	@ (8000824 <setConnectable+0xf0>)
 8000792:	461c      	mov	r4, r3
 8000794:	4613      	mov	r3, r2
 8000796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000798:	6020      	str	r0, [r4, #0]
 800079a:	6061      	str	r1, [r4, #4]
 800079c:	60a2      	str	r2, [r4, #8]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	7323      	strb	r3, [r4, #12]
 		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	330d      	adds	r3, #13
 80007a6:	220a      	movs	r2, #10
 80007a8:	68f9      	ldr	r1, [r7, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 fb8f 	bl	8003ece <memcpy>

 		// remove existing buffer content
 		rxEvent=(uint8_t*)malloc(7);
 80007b0:	2007      	movs	r0, #7
 80007b2:	f003 f923 	bl	80039fc <malloc>
 80007b6:	4603      	mov	r3, r0
 80007b8:	607b      	str	r3, [r7, #4]
 		res=fetchBleEvent(rxEvent,7);
 80007ba:	2107      	movs	r1, #7
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fe79 	bl	80004b4 <fetchBleEvent>
 80007c2:	6038      	str	r0, [r7, #0]

 		// send the command to make the peripheral discoverable
 		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c4:	2117      	movs	r1, #23
 80007c6:	68b8      	ldr	r0, [r7, #8]
 80007c8:	f7ff ff24 	bl	8000614 <sendCommand>
 		HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	@ 0x64
 80007ce:	f001 f9e7 	bl	8001ba0 <HAL_Delay>
 		res=fetchBleEvent(rxEvent,7);
 80007d2:	2107      	movs	r1, #7
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fe6d 	bl	80004b4 <fetchBleEvent>
 80007da:	6038      	str	r0, [r7, #0]
 		if(res==BLE_OK){
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10e      	bne.n	8000800 <setConnectable+0xcc>
 		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 80007e2:	2207      	movs	r2, #7
 80007e4:	4910      	ldr	r1, [pc, #64]	@ (8000828 <setConnectable+0xf4>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff feee 	bl	80005c8 <checkEventResp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d106      	bne.n	8000800 <setConnectable+0xcc>
 			  stackInitCompleteFlag|=0x80;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <setConnectable+0xf8>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <setConnectable+0xf8>)
 80007fe:	801a      	strh	r2, [r3, #0]
 		   }
 		}
 		free(rxEvent);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f003 f903 	bl	8003a0c <free>
 		free(discoverableCommand);
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f003 f900 	bl	8003a0c <free>
 		free(localname);
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f003 f8fd 	bl	8003a0c <free>
 		HAL_Delay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f001 f9c4 	bl	8001ba0 <HAL_Delay>
  }
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	20000118 	.word	0x20000118
 8000824:	20000078 	.word	0x20000078
 8000828:	20000088 	.word	0x20000088
 800082c:	200002ee 	.word	0x200002ee

08000830 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 800083e:	68b9      	ldr	r1, [r7, #8]
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fee7 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	005a      	lsls	r2, r3, #1
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f003 f8d4 	bl	80039fc <malloc>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <BLE_command+0x90>)
 800085a:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000860:	e007      	b.n	8000872 <BLE_command+0x42>
			contatore++;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3301      	adds	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800086e:	4293      	cmp	r3, r2
 8000870:	dc07      	bgt.n	8000882 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000872:	2140      	movs	r1, #64	@ 0x40
 8000874:	4813      	ldr	r0, [pc, #76]	@ (80008c4 <BLE_command+0x94>)
 8000876:	f001 fc93 	bl	80021a0 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0f0      	beq.n	8000862 <BLE_command+0x32>
 8000880:	e000      	b.n	8000884 <BLE_command+0x54>
				break;
 8000882:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <BLE_command+0x90>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	005a      	lsls	r2, r3, #1
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4619      	mov	r1, r3
 8000892:	f7ff fe0f 	bl	80004b4 <fetchBleEvent>
 8000896:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d107      	bne.n	80008ae <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <BLE_command+0x90>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe8e 	bl	80005c8 <checkEventResp>
 80008ac:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f001 f976 	bl	8001ba0 <HAL_Delay>
 
 
	 return response;
 80008b4:	697b      	ldr	r3, [r7, #20]
 }
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002f0 	.word	0x200002f0
 80008c4:	48001000 	.word	0x48001000

080008c8 <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <addService+0x60>)
 80008d6:	2210      	movs	r2, #16
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 faf7 	bl	8003ece <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <addService+0x64>)
 80008e6:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2307      	movs	r3, #7
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <addService+0x68>)
 80008f0:	2117      	movs	r1, #23
 80008f2:	480e      	ldr	r0, [pc, #56]	@ (800092c <addService+0x64>)
 80008f4:	f7ff ff9c 	bl	8000830 <BLE_command>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10a      	bne.n	8000914 <addService+0x4c>
			handle[0]=rxEvent[7];
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <addService+0x6c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	79da      	ldrb	r2, [r3, #7]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <addService+0x6c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3301      	adds	r3, #1
 8000910:	7a12      	ldrb	r2, [r2, #8]
 8000912:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <addService+0x6c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f003 f877 	bl	8003a0c <free>
 }
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000095 	.word	0x20000095
 800092c:	20000090 	.word	0x20000090
 8000930:	200000a8 	.word	0x200000a8
 8000934:	200002f0 	.word	0x200002f0

08000938 <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <addCharacteristic+0x74>)
 8000948:	2210      	movs	r2, #16
 800094a:	68f9      	ldr	r1, [r7, #12]
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fabe 	bl	8003ece <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <addCharacteristic+0x78>)
 8000958:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	785a      	ldrb	r2, [r3, #1]
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <addCharacteristic+0x78>)
 8000960:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000962:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <addCharacteristic+0x78>)
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000968:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <addCharacteristic+0x78>)
 800096a:	7e3b      	ldrb	r3, [r7, #24]
 800096c:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800096e:	2301      	movs	r3, #1
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2307      	movs	r3, #7
 8000974:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <addCharacteristic+0x7c>)
 8000976:	211e      	movs	r1, #30
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <addCharacteristic+0x78>)
 800097a:	f7ff ff59 	bl	8000830 <BLE_command>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <addCharacteristic+0x80>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	79da      	ldrb	r2, [r3, #7]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <addCharacteristic+0x80>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	7a12      	ldrb	r2, [r2, #8]
 8000998:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <addCharacteristic+0x80>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 f834 	bl	8003a0c <free>
 }
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000b7 	.word	0x200000b7
 80009b0:	200000b0 	.word	0x200000b0
 80009b4:	200000d0 	.word	0x200000d0
 80009b8:	200002f0 	.word	0x200002f0

080009bc <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	3306      	adds	r3, #6
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <updateCharValue+0x9c>)
 80009d4:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <updateCharValue+0x9c>)
 80009dc:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	785a      	ldrb	r2, [r3, #1]
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <updateCharValue+0x9c>)
 80009e4:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <updateCharValue+0x9c>)
 80009ec:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	785a      	ldrb	r2, [r3, #1]
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <updateCharValue+0x9c>)
 80009f4:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <updateCharValue+0x9c>)
 80009fc:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <updateCharValue+0x9c>)
 8000a04:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	330a      	adds	r3, #10
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fff6 	bl	80039fc <malloc>
 8000a10:	4603      	mov	r3, r0
 8000a12:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a14:	220a      	movs	r2, #10
 8000a16:	4910      	ldr	r1, [pc, #64]	@ (8000a58 <updateCharValue+0x9c>)
 8000a18:	6978      	ldr	r0, [r7, #20]
 8000a1a:	f003 fa58 	bl	8003ece <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	330a      	adds	r3, #10
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	6a39      	ldr	r1, [r7, #32]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fa51 	bl	8003ece <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	f103 010a 	add.w	r1, r3, #10
 8000a32:	2300      	movs	r3, #0
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2307      	movs	r3, #7
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <updateCharValue+0xa0>)
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff fef8 	bl	8000830 <BLE_command>
 
	 free(commandComplete);
 8000a40:	6978      	ldr	r0, [r7, #20]
 8000a42:	f002 ffe3 	bl	8003a0c <free>
	 free(rxEvent);
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <updateCharValue+0xa4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 ffde 	bl	8003a0c <free>
 }
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000d8 	.word	0x200000d8
 8000a5c:	200000d0 	.word	0x200000d0
 8000a60:	200002f0 	.word	0x200002f0

08000a64 <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <disconnectBLE+0x98>)
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a74:	d105      	bne.n	8000a82 <disconnectBLE+0x1e>
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <disconnectBLE+0x98>)
 8000a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a80:	d037      	beq.n	8000af2 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <disconnectBLE+0x9c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <disconnectBLE+0x98>)
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <disconnectBLE+0x98>)
 8000a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000a9c:	2313      	movs	r3, #19
 8000a9e:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000aa0:	1d38      	adds	r0, r7, #4
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <disconnectBLE+0xa0>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	f7ff fec0 	bl	8000830 <BLE_command>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11e      	bne.n	8000af4 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000ab6:	217f      	movs	r1, #127	@ 0x7f
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <disconnectBLE+0xa4>)
 8000aba:	f7ff fcfb 	bl	80004b4 <fetchBleEvent>
 8000abe:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10f      	bne.n	8000ae6 <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	4910      	ldr	r1, [pc, #64]	@ (8000b0c <disconnectBLE+0xa8>)
 8000aca:	480f      	ldr	r0, [pc, #60]	@ (8000b08 <disconnectBLE+0xa4>)
 8000acc:	f7ff fd7c 	bl	80005c8 <checkEventResp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d107      	bne.n	8000ae6 <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <disconnectBLE+0x98>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000adc:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <disconnectBLE+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae4:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <disconnectBLE+0xac>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 ff8e 	bl	8003a0c <free>
 8000af0:	e000      	b.n	8000af4 <disconnectBLE+0x90>
		return;
 8000af2:	bf00      	nop
	 }
 }
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000150 	.word	0x20000150
 8000b00:	200000e8 	.word	0x200000e8
 8000b04:	200000f4 	.word	0x200000f4
 8000b08:	200001e4 	.word	0x200001e4
 8000b0c:	200000f0 	.word	0x200000f0
 8000b10:	200002f0 	.word	0x200002f0

08000b14 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d102      	bne.n	8000b2a <setDiscoverability+0x16>
		 setConnectable();
 8000b24:	f7ff fe06 	bl	8000734 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b28:	e00f      	b.n	8000b4a <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10c      	bne.n	8000b4a <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2307      	movs	r3, #7
 8000b36:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <setDiscoverability+0x40>)
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <setDiscoverability+0x44>)
 8000b3c:	f7ff fe78 	bl	8000830 <BLE_command>
		 free(rxEvent);
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <setDiscoverability+0x48>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 ff61 	bl	8003a0c <free>
 }
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000110 	.word	0x20000110
 8000b58:	2000010c 	.word	0x2000010c
 8000b5c:	200002f0 	.word	0x200002f0

08000b60 <i2c_init>:
#include "i2c.h"
#include <stm32l475xx.h>

void i2c_init() {
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
    /* Enable clocks for GPIOB and I2C2 */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <i2c_init+0xb0>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	4a29      	ldr	r2, [pc, #164]	@ (8000c10 <i2c_init+0xb0>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b70:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <i2c_init+0xb0>)
 8000b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b74:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <i2c_init+0xb0>)
 8000b76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b7a:	6593      	str	r3, [r2, #88]	@ 0x58

    /* Configure PB10 and PB11 for alternate function (I2C2) */
    GPIOB->MODER &= ~((3U << (10 * 2)) | (3U << (11 * 2)));
 8000b7c:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <i2c_init+0xb4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a24      	ldr	r2, [pc, #144]	@ (8000c14 <i2c_init+0xb4>)
 8000b82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b86:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2U << (10 * 2)) | (2U << (11 * 2)));
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <i2c_init+0xb4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <i2c_init+0xb4>)
 8000b8e:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000b92:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~((0xFU << ((10 - 8) * 4)) | (0xFU << ((11 - 8) * 4)));
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <i2c_init+0xb4>)
 8000b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b98:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <i2c_init+0xb4>)
 8000b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b9e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((4U << ((10 - 8) * 4)) | (4U << ((11 - 8) * 4)));
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <i2c_init+0xb4>)
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c14 <i2c_init+0xb4>)
 8000ba6:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000baa:	6253      	str	r3, [r2, #36]	@ 0x24

    GPIOB->OTYPER |= (1U << 10) | (1U << 11);
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <i2c_init+0xb4>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <i2c_init+0xb4>)
 8000bb2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000bb6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= ((3U << (10 * 2)) | (3U << (11 * 2)));
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <i2c_init+0xb4>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4a15      	ldr	r2, [pc, #84]	@ (8000c14 <i2c_init+0xb4>)
 8000bbe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~((3U << (10 * 2)) | (3U << (11 * 2)));
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <i2c_init+0xb4>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <i2c_init+0xb4>)
 8000bca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bce:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= ((1U << (10 * 2)) | (1U << (11 * 2)));
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <i2c_init+0xb4>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <i2c_init+0xb4>)
 8000bd6:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000bda:	60d3      	str	r3, [r2, #12]

    /* Reset and configure I2C2 */
    I2C2->CR1 |= I2C_CR1_SWRST;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <i2c_init+0xb8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <i2c_init+0xb8>)
 8000be2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000be6:	6013      	str	r3, [r2, #0]
    I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <i2c_init+0xb8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <i2c_init+0xb8>)
 8000bee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000bf2:	6013      	str	r3, [r2, #0]

    //Set PRESC = 1, SCLDEL = 0, SDADEL = 0, SCLH = 533, SCLL = 533 all at once; results in I2C clock frequency of around 15 kHz
    I2C2->TIMINGR = 0x10707D15;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <i2c_init+0xb8>)
 8000bf6:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <i2c_init+0xbc>)
 8000bf8:	611a      	str	r2, [r3, #16]

    I2C2->CR1 |= I2C_CR1_PE;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <i2c_init+0xb8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <i2c_init+0xb8>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6013      	str	r3, [r2, #0]
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400
 8000c18:	40005800 	.word	0x40005800
 8000c1c:	10707d15 	.word	0x10707d15

08000c20 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	603a      	str	r2, [r7, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	71bb      	strb	r3, [r7, #6]
 8000c32:	4613      	mov	r3, r2
 8000c34:	717b      	strb	r3, [r7, #5]
    while (I2C2->ISR & I2C_ISR_BUSY){
 8000c36:	e007      	b.n	8000c48 <i2c_transaction+0x28>
        if (I2C2->ISR & I2C_ISR_TIMEOUT) return 1;
 8000c38:	4b47      	ldr	r3, [pc, #284]	@ (8000d58 <i2c_transaction+0x138>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <i2c_transaction+0x28>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e080      	b.n	8000d4a <i2c_transaction+0x12a>
    while (I2C2->ISR & I2C_ISR_BUSY){
 8000c48:	4b43      	ldr	r3, [pc, #268]	@ (8000d58 <i2c_transaction+0x138>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f1      	bne.n	8000c38 <i2c_transaction+0x18>
    }

    I2C2->CR2 = 0;
 8000c54:	4b40      	ldr	r3, [pc, #256]	@ (8000d58 <i2c_transaction+0x138>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
    I2C2->CR2 |= (address << 1) | (len << I2C_CR2_NBYTES_Pos) | I2C_CR2_AUTOEND;
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d58 <i2c_transaction+0x138>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	0051      	lsls	r1, r2, #1
 8000c62:	797a      	ldrb	r2, [r7, #5]
 8000c64:	0412      	lsls	r2, r2, #16
 8000c66:	430a      	orrs	r2, r1
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d58 <i2c_transaction+0x138>)
 8000c6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c70:	6053      	str	r3, [r2, #4]

    if (dir == 0) {
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d12a      	bne.n	8000cce <i2c_transaction+0xae>
        I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000c78:	4b37      	ldr	r3, [pc, #220]	@ (8000d58 <i2c_transaction+0x138>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a36      	ldr	r2, [pc, #216]	@ (8000d58 <i2c_transaction+0x138>)
 8000c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c82:	6053      	str	r3, [r2, #4]
        I2C2->CR2 |= I2C_CR2_START;
 8000c84:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <i2c_transaction+0x138>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a33      	ldr	r2, [pc, #204]	@ (8000d58 <i2c_transaction+0x138>)
 8000c8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c8e:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e016      	b.n	8000cc4 <i2c_transaction+0xa4>
            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
            	if (I2C2->ISR & I2C_ISR_TIMEOUT) return 2;
 8000c96:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <i2c_transaction+0x138>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <i2c_transaction+0x86>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e051      	b.n	8000d4a <i2c_transaction+0x12a>
            while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <i2c_transaction+0x138>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f1      	beq.n	8000c96 <i2c_transaction+0x76>
            }
            I2C2->TXDR = data[i];
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <i2c_transaction+0x138>)
 8000cbc:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	797b      	ldrb	r3, [r7, #5]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3ec      	bcc.n	8000ca6 <i2c_transaction+0x86>
 8000ccc:	e033      	b.n	8000d36 <i2c_transaction+0x116>
        }
    }
    else {
        I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000cce:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <i2c_transaction+0x138>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <i2c_transaction+0x138>)
 8000cd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd8:	6053      	str	r3, [r2, #4]
        I2C2->CR2 |= I2C_CR2_START;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <i2c_transaction+0x138>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4a1e      	ldr	r2, [pc, #120]	@ (8000d58 <i2c_transaction+0x138>)
 8000ce0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ce4:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	e017      	b.n	8000d1c <i2c_transaction+0xfc>
            while (!(I2C2->ISR & I2C_ISR_RXNE)) {
            	if (I2C2->ISR & I2C_ISR_TIMEOUT) return 3;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <i2c_transaction+0x138>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <i2c_transaction+0xdc>
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e026      	b.n	8000d4a <i2c_transaction+0x12a>
            while (!(I2C2->ISR & I2C_ISR_RXNE)) {
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <i2c_transaction+0x138>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f1      	beq.n	8000cec <i2c_transaction+0xcc>
            }
            data[i] = I2C2->RXDR;
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <i2c_transaction+0x138>)
 8000d0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	73bb      	strb	r3, [r7, #14]
 8000d1c:	7bba      	ldrb	r2, [r7, #14]
 8000d1e:	797b      	ldrb	r3, [r7, #5]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3eb      	bcc.n	8000cfc <i2c_transaction+0xdc>
        }
    }

    while (!(I2C2->ISR & I2C_ISR_STOPF)) {
 8000d24:	e007      	b.n	8000d36 <i2c_transaction+0x116>
    	if (I2C2->ISR & I2C_ISR_TIMEOUT) return 4;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <i2c_transaction+0x138>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <i2c_transaction+0x116>
 8000d32:	2304      	movs	r3, #4
 8000d34:	e009      	b.n	8000d4a <i2c_transaction+0x12a>
    while (!(I2C2->ISR & I2C_ISR_STOPF)) {
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <i2c_transaction+0x138>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f1      	beq.n	8000d26 <i2c_transaction+0x106>
    }
    I2C2->ICR = I2C_ICR_STOPCF;
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <i2c_transaction+0x138>)
 8000d44:	2220      	movs	r2, #32
 8000d46:	61da      	str	r2, [r3, #28]

    return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40005800 	.word	0x40005800

08000d5c <leds_set>:
	/* Turn off the LED for PB14*/
	GPIOB->ODR &= ~GPIO_ODR_OD14;
}

void leds_set(uint8_t led)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if(led == 0b11) {
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d10e      	bne.n	8000d8a <leds_set+0x2e>
	  GPIOA->ODR |= GPIO_ODR_OD5;
 8000d6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d76:	f043 0320 	orr.w	r3, r3, #32
 8000d7a:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= GPIO_ODR_OD14;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <leds_set+0xa0>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	4a1e      	ldr	r2, [pc, #120]	@ (8000dfc <leds_set+0xa0>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d86:	6153      	str	r3, [r2, #20]
  }
  else {
	  GPIOA->ODR &= ~GPIO_ODR_OD5;
	  GPIOB->ODR &= ~GPIO_ODR_OD14;
  }
}
 8000d88:	e031      	b.n	8000dee <leds_set+0x92>
  else if(led == 0b10) {
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d10e      	bne.n	8000dae <leds_set+0x52>
	  GPIOB->ODR |= GPIO_ODR_OD14;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <leds_set+0xa0>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a19      	ldr	r2, [pc, #100]	@ (8000dfc <leds_set+0xa0>)
 8000d96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9a:	6153      	str	r3, [r2, #20]
	  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000da6:	f023 0320 	bic.w	r3, r3, #32
 8000daa:	6153      	str	r3, [r2, #20]
}
 8000dac:	e01f      	b.n	8000dee <leds_set+0x92>
  else if(led == 0b01) {
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d10e      	bne.n	8000dd2 <leds_set+0x76>
	  GPIOA->ODR |= GPIO_ODR_OD5;
 8000db4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <leds_set+0xa0>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <leds_set+0xa0>)
 8000dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dce:	6153      	str	r3, [r2, #20]
}
 8000dd0:	e00d      	b.n	8000dee <leds_set+0x92>
	  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000dd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ddc:	f023 0320 	bic.w	r3, r3, #32
 8000de0:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <leds_set+0xa0>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <leds_set+0xa0>)
 8000de8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dec:	6153      	str	r3, [r2, #20]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	48000400 	.word	0x48000400

08000e00 <lsm6dsl_write_reg>:
#define WAKE_UP_THS			  0x5B
#define TAP_CFG               0x58
#define MD1_CFG               0x5E

//Helper functions to encapsulate read/writes with I2C
static uint8_t lsm6dsl_write_reg(uint8_t reg, uint8_t value, uint8_t len) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	71bb      	strb	r3, [r7, #6]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	717b      	strb	r3, [r7, #5]
    uint8_t data[2] = {reg, value};
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	733b      	strb	r3, [r7, #12]
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	737b      	strb	r3, [r7, #13]
    return i2c_transaction(LSM6DSL_ADDR, 0, data, len + 1);
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	2100      	movs	r1, #0
 8000e26:	206a      	movs	r0, #106	@ 0x6a
 8000e28:	f7ff fefa 	bl	8000c20 <i2c_transaction>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <lsm6dsl_read_reg>:

static uint8_t lsm6dsl_read_reg(uint8_t reg, uint8_t* value, uint8_t len) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71bb      	strb	r3, [r7, #6]
    uint8_t status = i2c_transaction(LSM6DSL_ADDR, 0, &reg, 1);
 8000e48:	1dfa      	adds	r2, r7, #7
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	206a      	movs	r0, #106	@ 0x6a
 8000e50:	f7ff fee6 	bl	8000c20 <i2c_transaction>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
    if (status != 0) {
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <lsm6dsl_read_reg+0x34>
    	printf("LSM6DSL: Error setting up read address (err %d)\n", status);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4808      	ldr	r0, [pc, #32]	@ (8000e84 <lsm6dsl_read_reg+0x4c>)
 8000e64:	f002 ff6a 	bl	8003d3c <iprintf>
    	return status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	e006      	b.n	8000e7a <lsm6dsl_read_reg+0x42>
    }
    return i2c_transaction(LSM6DSL_ADDR, 1, value, len);
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	206a      	movs	r0, #106	@ 0x6a
 8000e74:	f7ff fed4 	bl	8000c20 <i2c_transaction>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08004d34 	.word	0x08004d34

08000e88 <lsm6dsl_init>:

void lsm6dsl_init() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
    uint8_t status;
    uint8_t who_am_i = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71bb      	strb	r3, [r7, #6]

    status = lsm6dsl_read_reg(WHO_AM_I_REG, &who_am_i, 1);
 8000e92:	1dbb      	adds	r3, r7, #6
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	200f      	movs	r0, #15
 8000e9a:	f7ff ffcd 	bl	8000e38 <lsm6dsl_read_reg>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
    if (status != 0) printf("LSM6DSL: Error reading WHO_AM_I register (err %d)\n", status);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <lsm6dsl_init+0x2a>
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481d      	ldr	r0, [pc, #116]	@ (8000f24 <lsm6dsl_init+0x9c>)
 8000eae:	f002 ff45 	bl	8003d3c <iprintf>
    // Check WHO_AM_I has the expected value
    if (who_am_i != LSM6DSL_ADDR) printf("LSM6DSL: Unexpected WHO_AM_I value: 0x%02X\n", who_am_i);
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	2b6a      	cmp	r3, #106	@ 0x6a
 8000eb6:	d005      	beq.n	8000ec4 <lsm6dsl_init+0x3c>
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481a      	ldr	r0, [pc, #104]	@ (8000f28 <lsm6dsl_init+0xa0>)
 8000ebe:	f002 ff3d 	bl	8003d3c <iprintf>
 8000ec2:	e004      	b.n	8000ece <lsm6dsl_init+0x46>
    else printf("LSM6DSL: WHO_AM_I = 0x%02X\n", who_am_i);
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4818      	ldr	r0, [pc, #96]	@ (8000f2c <lsm6dsl_init+0xa4>)
 8000eca:	f002 ff37 	bl	8003d3c <iprintf>

    status = lsm6dsl_write_reg(CTRL3_C, 0x04, 1);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	2012      	movs	r0, #18
 8000ed4:	f7ff ff94 	bl	8000e00 <lsm6dsl_write_reg>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
    if (status != 0) printf("LSM6DSL: Error configuring CTRL3_C (err %d)\n", status);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <lsm6dsl_init+0x66>
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <lsm6dsl_init+0xa8>)
 8000ee8:	f002 ff28 	bl	8003d3c <iprintf>
 8000eec:	e002      	b.n	8000ef4 <lsm6dsl_init+0x6c>
    else printf("LSM6DSL: CTRL3_C configured (auto-increment enabled)\n");
 8000eee:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <lsm6dsl_init+0xac>)
 8000ef0:	f002 ff8c 	bl	8003e0c <puts>

    // Sets the acc ODR to run at the lowest Hz offered, which would be 1.6 Hz
//    status = lsm6dsl_write_reg(CTRL1_XL, 0b10110000, 1);
//    if (status != 0) printf("LSM6DSL: Error writing CTRL1_XL (err %d)\n", status);
//    else printf("LSM6DSL: CTRL1_XL configured (0b10110000)\n");
    status = lsm6dsl_write_reg(CTRL1_XL, 0x60, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2160      	movs	r1, #96	@ 0x60
 8000ef8:	2010      	movs	r0, #16
 8000efa:	f7ff ff81 	bl	8000e00 <lsm6dsl_write_reg>
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
    if (status != 0) printf("LSM6DSL: Error writing CTRL1_XL (err %d)\n", status);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <lsm6dsl_init+0x8c>
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480a      	ldr	r0, [pc, #40]	@ (8000f38 <lsm6dsl_init+0xb0>)
 8000f0e:	f002 ff15 	bl	8003d3c <iprintf>
//	GPIO_InitTypeDef GPIO_InitStruct = {0};
//	GPIO_InitStruct.Pin = GPIO_PIN_11;
//	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
 8000f12:	e002      	b.n	8000f1a <lsm6dsl_init+0x92>
    else printf("LSM6DSL: CTRL1_XL configured (0x60)\n");
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <lsm6dsl_init+0xb4>)
 8000f16:	f002 ff79 	bl	8003e0c <puts>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	08004d68 	.word	0x08004d68
 8000f28:	08004d9c 	.word	0x08004d9c
 8000f2c:	08004dc8 	.word	0x08004dc8
 8000f30:	08004de4 	.word	0x08004de4
 8000f34:	08004e14 	.word	0x08004e14
 8000f38:	08004e4c 	.word	0x08004e4c
 8000f3c:	08004e78 	.word	0x08004e78

08000f40 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
    uint8_t status;
    uint8_t data[6];
    uint8_t reg = OUTX_L_XL;
 8000f4c:	2328      	movs	r3, #40	@ 0x28
 8000f4e:	75fb      	strb	r3, [r7, #23]

    status = lsm6dsl_read_reg(reg, data, 6);
 8000f50:	f107 0110 	add.w	r1, r7, #16
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	2206      	movs	r2, #6
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff6d 	bl	8000e38 <lsm6dsl_read_reg>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75bb      	strb	r3, [r7, #22]
    if (status != 0) printf("LSM6DSL: Error reading acceleration data (err %d)\n", status);
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <lsm6dsl_read_xyz+0x32>
 8000f68:	7dbb      	ldrb	r3, [r7, #22]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4810      	ldr	r0, [pc, #64]	@ (8000fb0 <lsm6dsl_read_xyz+0x70>)
 8000f6e:	f002 fee5 	bl	8003d3c <iprintf>

    //Store data values in the appropriate location; combine low and high values for each X,Y,Z value
    *x = (int16_t)((data[1] << 8) | data[0]);
 8000f72:	7c7b      	ldrb	r3, [r7, #17]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	7c3b      	ldrb	r3, [r7, #16]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]);
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7cbb      	ldrb	r3, [r7, #18]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	7d3b      	ldrb	r3, [r7, #20]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	801a      	strh	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	08004e9c 	.word	0x08004e9c

08000fb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d013      	beq.n	8000ff4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fcc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fdc:	e000      	b.n	8000fe0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fde:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fe0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f9      	beq.n	8000fde <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <cycles_to_seconds>:
	int minutes = total_s / 60;

	return minutes;
}

int cycles_to_seconds(int cycles, int ms_per_cycle) {
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	int total_ms = cycles * ms_per_cycle;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	60fb      	str	r3, [r7, #12]
	int total_s = total_ms / 1000;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <cycles_to_seconds+0x34>)
 800101c:	fb82 1203 	smull	r1, r2, r2, r3
 8001020:	1192      	asrs	r2, r2, #6
 8001022:	17db      	asrs	r3, r3, #31
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	60bb      	str	r3, [r7, #8]

	return total_s;
 8001028:	68bb      	ldr	r3, [r7, #8]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	10624dd3 	.word	0x10624dd3

0800103c <TIM2_IRQHandler>:
extern uint8_t deviceName[];
volatile bool timeForMessage = false;
volatile int message_counter = 0;

// Notifies when it's time to read accelerometer values or if it's time for a message
void TIM2_IRQHandler() {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8001040:	f000 f9a0 	bl	8001384 <SystemClock_Config>
	HAL_ResumeTick();
 8001044:	f000 fde0 	bl	8001c08 <HAL_ResumeTick>
	//Interrupt handler that will fire at the end of each period of TIM2.
	//Note that global variables that are modified in interrupt handlers must be declared as volatile
	if(TIM2->SR & TIM_SR_UIF){
 8001048:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d019      	beq.n	800108a <TIM2_IRQHandler+0x4e>
		TIM2->SR &= ~TIM_SR_UIF;
 8001056:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	6113      	str	r3, [r2, #16]
		readAccel = true;
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <TIM2_IRQHandler+0x58>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
		lost_counter += 1; //this gets reset in main if not lost
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <TIM2_IRQHandler+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <TIM2_IRQHandler+0x5c>)
 8001074:	6013      	str	r3, [r2, #0]
		if(isLost) message_counter += 1; // this gets reset in main once a message is sent
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <TIM2_IRQHandler+0x60>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <TIM2_IRQHandler+0x4e>
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <TIM2_IRQHandler+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <TIM2_IRQHandler+0x64>)
 8001088:	6013      	str	r3, [r2, #0]
	}
	HAL_PWR_DisableSleepOnExit();
 800108a:	f001 f8dd 	bl	8002248 <HAL_PWR_DisableSleepOnExit>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000035d 	.word	0x2000035d
 8001098:	20000360 	.word	0x20000360
 800109c:	2000035c 	.word	0x2000035c
 80010a0:	20000364 	.word	0x20000364

080010a4 <_write>:

int _write(int file, char *ptr, int len) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
    int i = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e009      	b.n	80010ce <_write+0x2a>
        ITM_SendChar(*ptr++);
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff76 	bl	8000fb4 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbf1      	blt.n	80010ba <_write+0x16>
    }
    return len;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LPTIM1_IRQHandler>:

// Notifies when it's time to read accelerometer values or if it's time for a message
void LPTIM1_IRQHandler() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80010e4:	f000 f94e 	bl	8001384 <SystemClock_Config>
	HAL_ResumeTick();
 80010e8:	f000 fd8e 	bl	8001c08 <HAL_ResumeTick>
    // Check if the interrupt is caused by the auto-reload match flag (ARRM) or another condition.
    if (LPTIM1->ISR & LPTIM_ISR_ARRM) {
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <LPTIM1_IRQHandler+0x50>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d017      	beq.n	8001128 <LPTIM1_IRQHandler+0x48>
    	LPTIM1->ISR &= ~LPTIM_ISR_ARRM; //clear interrupt flag
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <LPTIM1_IRQHandler+0x50>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <LPTIM1_IRQHandler+0x50>)
 80010fe:	f023 0302 	bic.w	r3, r3, #2
 8001102:	6013      	str	r3, [r2, #0]
        readAccel = true;
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <LPTIM1_IRQHandler+0x54>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
        lost_counter += 1; //this gets reset in main if not lost
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <LPTIM1_IRQHandler+0x58>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a09      	ldr	r2, [pc, #36]	@ (8001138 <LPTIM1_IRQHandler+0x58>)
 8001112:	6013      	str	r3, [r2, #0]
        if(isLost) message_counter += 1; // this gets reset in main once a message is sent
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <LPTIM1_IRQHandler+0x5c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <LPTIM1_IRQHandler+0x48>
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <LPTIM1_IRQHandler+0x60>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <LPTIM1_IRQHandler+0x60>)
 8001126:	6013      	str	r3, [r2, #0]
    }
    HAL_PWR_DisableSleepOnExit();
 8001128:	f001 f88e 	bl	8002248 <HAL_PWR_DisableSleepOnExit>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40007c00 	.word	0x40007c00
 8001134:	2000035d 	.word	0x2000035d
 8001138:	20000360 	.word	0x20000360
 800113c:	2000035c 	.word	0x2000035c
 8001140:	20000364 	.word	0x20000364

08001144 <main>:

int16_t ax, ay, az; //accelerometer values
int16_t prev_x, prev_y, prev_z; //prev acc values

int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	@ 0x38
 8001148:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800114a:	f000 fcb4 	bl	8001ab6 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800114e:	f000 f919 	bl	8001384 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001152:	f000 f99b 	bl	800148c <MX_GPIO_Init>
	MX_SPI3_Init();
 8001156:	f000 f95b 	bl	8001410 <MX_SPI3_Init>

	//RESET BLE MODULE
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001164:	f001 f834 	bl	80021d0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001168:	200a      	movs	r0, #10
 800116a:	f000 fd19 	bl	8001ba0 <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001178:	f001 f82a 	bl	80021d0 <HAL_GPIO_WritePin>

	ble_init();
 800117c:	f7ff f880 	bl	8000280 <ble_init>

	HAL_Delay(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f000 fd0d 	bl	8001ba0 <HAL_Delay>

	uint8_t nonDiscoverable = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	// Initially make device nondiscoverable
//	disconnectBLE();
//	setDiscoverability(0);
//	catchBLE();

	i2c_init();
 800118c:	f7ff fce8 	bl	8000b60 <i2c_init>
	lsm6dsl_init();
 8001190:	f7ff fe7a 	bl	8000e88 <lsm6dsl_init>
	//leds_init();
	//leds_set(0b00);

	//Device name will be stored here
	char deviceNameString[8];
	strncpy(deviceNameString, (char *) deviceName, sizeof(deviceNameString));
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	2208      	movs	r2, #8
 800119a:	4966      	ldr	r1, [pc, #408]	@ (8001334 <main+0x1f0>)
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fe3d 	bl	8003e1c <strncpy>
//	lsm6dsl_read_xyz(&ax, &ay, &az);
//	prev_x = ax;
//	prev_y = ay;
//	prev_z = az;

	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // Enable the power interface clock
 80011a2:	4b65      	ldr	r3, [pc, #404]	@ (8001338 <main+0x1f4>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	4a64      	ldr	r2, [pc, #400]	@ (8001338 <main+0x1f4>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	6593      	str	r3, [r2, #88]	@ 0x58
	//PWR->CR1 |= PWR_CR1_LPMS;          // Enable low power sleep mode

	//__disable_irq();

	timer_init_lptim(LPTIM1);
 80011ae:	4863      	ldr	r0, [pc, #396]	@ (800133c <main+0x1f8>)
 80011b0:	f000 fbaa 	bl	8001908 <timer_init_lptim>
	timer_set_ms_lptim(LPTIM1, MS_PER_CYCLE_READ);
 80011b4:	2132      	movs	r1, #50	@ 0x32
 80011b6:	4861      	ldr	r0, [pc, #388]	@ (800133c <main+0x1f8>)
 80011b8:	f000 fc32 	bl	8001a20 <timer_set_ms_lptim>

	//__enable_irq();


	while (1){
		if(readAccel){
 80011bc:	4b60      	ldr	r3, [pc, #384]	@ (8001340 <main+0x1fc>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06d      	beq.n	80012a2 <main+0x15e>
			leds_set(0b11);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff fdc8 	bl	8000d5c <leds_set>

			lsm6dsl_read_xyz(&ax, &ay, &az);
 80011cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001344 <main+0x200>)
 80011ce:	495e      	ldr	r1, [pc, #376]	@ (8001348 <main+0x204>)
 80011d0:	485e      	ldr	r0, [pc, #376]	@ (800134c <main+0x208>)
 80011d2:	f7ff feb5 	bl	8000f40 <lsm6dsl_read_xyz>

			//Calculates variances
			int var_x = (ax - prev_x) * (ax - prev_x);
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <main+0x208>)
 80011d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b5c      	ldr	r3, [pc, #368]	@ (8001350 <main+0x20c>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	4a59      	ldr	r2, [pc, #356]	@ (800134c <main+0x208>)
 80011e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4a58      	ldr	r2, [pc, #352]	@ (8001350 <main+0x20c>)
 80011f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011f4:	1a8a      	subs	r2, r1, r2
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
			int var_y = (ay - prev_y) * (ay - prev_y);
 80011fc:	4b52      	ldr	r3, [pc, #328]	@ (8001348 <main+0x204>)
 80011fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001202:	461a      	mov	r2, r3
 8001204:	4b53      	ldr	r3, [pc, #332]	@ (8001354 <main+0x210>)
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a4e      	ldr	r2, [pc, #312]	@ (8001348 <main+0x204>)
 800120e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001212:	4611      	mov	r1, r2
 8001214:	4a4f      	ldr	r2, [pc, #316]	@ (8001354 <main+0x210>)
 8001216:	f9b2 2000 	ldrsh.w	r2, [r2]
 800121a:	1a8a      	subs	r2, r1, r2
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
			int var_z = (az - prev_z) * (az - prev_z);
 8001222:	4b48      	ldr	r3, [pc, #288]	@ (8001344 <main+0x200>)
 8001224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001228:	461a      	mov	r2, r3
 800122a:	4b4b      	ldr	r3, [pc, #300]	@ (8001358 <main+0x214>)
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	4a44      	ldr	r2, [pc, #272]	@ (8001344 <main+0x200>)
 8001234:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001238:	4611      	mov	r1, r2
 800123a:	4a47      	ldr	r2, [pc, #284]	@ (8001358 <main+0x214>)
 800123c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001240:	1a8a      	subs	r2, r1, r2
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	623b      	str	r3, [r7, #32]

			// if variances below threshold, assumes no movement and increments lost_counter
			if (var_x < VARIANCE_THRESHOLD && var_y < VARIANCE_THRESHOLD && var_z < VARIANCE_THRESHOLD) {
 8001248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124a:	4a44      	ldr	r2, [pc, #272]	@ (800135c <main+0x218>)
 800124c:	4293      	cmp	r3, r2
 800124e:	dc10      	bgt.n	8001272 <main+0x12e>
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	4a42      	ldr	r2, [pc, #264]	@ (800135c <main+0x218>)
 8001254:	4293      	cmp	r3, r2
 8001256:	dc0c      	bgt.n	8001272 <main+0x12e>
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	4a40      	ldr	r2, [pc, #256]	@ (800135c <main+0x218>)
 800125c:	4293      	cmp	r3, r2
 800125e:	dc08      	bgt.n	8001272 <main+0x12e>
				//Enter lost mode if enough time has passed
				if (lost_counter >= LOST_TIME_LIMIT) {
 8001260:	4b3f      	ldr	r3, [pc, #252]	@ (8001360 <main+0x21c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001268:	db09      	blt.n	800127e <main+0x13a>
					isLost = true;
 800126a:	4b3e      	ldr	r3, [pc, #248]	@ (8001364 <main+0x220>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
				if (lost_counter >= LOST_TIME_LIMIT) {
 8001270:	e005      	b.n	800127e <main+0x13a>
				}
			}
			// if movement detected, reset counter and exit lost mode
			else {
				lost_counter = 0;
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <main+0x21c>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
				isLost = false;
 8001278:	4b3a      	ldr	r3, [pc, #232]	@ (8001364 <main+0x220>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
			}

			// updates previous acceleration values for next loop iteration
			prev_x = ax;
 800127e:	4b33      	ldr	r3, [pc, #204]	@ (800134c <main+0x208>)
 8001280:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001284:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <main+0x20c>)
 8001286:	801a      	strh	r2, [r3, #0]
			prev_y = ay;
 8001288:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <main+0x204>)
 800128a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <main+0x210>)
 8001290:	801a      	strh	r2, [r3, #0]
			prev_z = az;
 8001292:	4b2c      	ldr	r3, [pc, #176]	@ (8001344 <main+0x200>)
 8001294:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001298:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <main+0x214>)
 800129a:	801a      	strh	r2, [r3, #0]

			readAccel = false;
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <main+0x1fc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		}

		if(!isLost) {
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <main+0x220>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f083 0301 	eor.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <main+0x17a>
			disconnectBLE();
 80012b2:	f7ff fbd7 	bl	8000a64 <disconnectBLE>
			setDiscoverability(0);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fc2c 	bl	8000b14 <setDiscoverability>
 80012bc:	e002      	b.n	80012c4 <main+0x180>
		}
		else {
			setDiscoverability(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fc28 	bl	8000b14 <setDiscoverability>
		}

		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80012c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <main+0x19a>
 80012cc:	2140      	movs	r1, #64	@ 0x40
 80012ce:	4826      	ldr	r0, [pc, #152]	@ (8001368 <main+0x224>)
 80012d0:	f000 ff66 	bl	80021a0 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <main+0x19a>
			catchBLE();
 80012da:	f7ff f9e7 	bl	80006ac <catchBLE>
//		  char test_str[20];
//		  sprintf(test_str, "%s%s%d%s", deviceNameString, " lost:", cycles_to_seconds(lost_counter, MS_PER_CYCLE_READ), "s");
//		  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(test_str), (unsigned char*)test_str);
//		  timeForMessage = false;
//		}
		if (message_counter >= NUM_CYCLES_FOR_MESSAGE) {
 80012de:	4b23      	ldr	r3, [pc, #140]	@ (800136c <main+0x228>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80012e4:	dd21      	ble.n	800132a <main+0x1e6>
			char test_str[20];
			sprintf(test_str, "%s%s%d%s", deviceNameString, " lost:", cycles_to_seconds(lost_counter, MS_PER_CYCLE_READ), "s");
 80012e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <main+0x21c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2132      	movs	r1, #50	@ 0x32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe89 	bl	8001004 <cycles_to_seconds>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f107 0218 	add.w	r2, r7, #24
 80012f8:	1d38      	adds	r0, r7, #4
 80012fa:	491d      	ldr	r1, [pc, #116]	@ (8001370 <main+0x22c>)
 80012fc:	9101      	str	r1, [sp, #4]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <main+0x230>)
 8001302:	491d      	ldr	r1, [pc, #116]	@ (8001378 <main+0x234>)
 8001304:	f002 fc38 	bl	8003b78 <siprintf>
			updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(test_str), (unsigned char*)test_str);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f7fe ff60 	bl	80001d0 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	2200      	movs	r2, #0
 800131c:	4917      	ldr	r1, [pc, #92]	@ (800137c <main+0x238>)
 800131e:	4818      	ldr	r0, [pc, #96]	@ (8001380 <main+0x23c>)
 8001320:	f7ff fb4c 	bl	80009bc <updateCharValue>
			message_counter = 0;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <main+0x228>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
		}

		HAL_SuspendTick();
 800132a:	f000 fc5d 	bl	8001be8 <HAL_SuspendTick>
		__WFI();
 800132e:	bf30      	wfi
		if(readAccel){
 8001330:	e744      	b.n	80011bc <main+0x78>
 8001332:	bf00      	nop
 8001334:	20000118 	.word	0x20000118
 8001338:	40021000 	.word	0x40021000
 800133c:	40007c00 	.word	0x40007c00
 8001340:	2000035d 	.word	0x2000035d
 8001344:	2000036c 	.word	0x2000036c
 8001348:	2000036a 	.word	0x2000036a
 800134c:	20000368 	.word	0x20000368
 8001350:	2000036e 	.word	0x2000036e
 8001354:	20000370 	.word	0x20000370
 8001358:	20000372 	.word	0x20000372
 800135c:	0007a11f 	.word	0x0007a11f
 8001360:	20000360 	.word	0x20000360
 8001364:	2000035c 	.word	0x2000035c
 8001368:	48001000 	.word	0x48001000
 800136c:	20000364 	.word	0x20000364
 8001370:	08004ee4 	.word	0x08004ee4
 8001374:	08004ed0 	.word	0x08004ed0
 8001378:	08004ed8 	.word	0x08004ed8
 800137c:	200002ec 	.word	0x200002ec
 8001380:	200002e4 	.word	0x200002e4

08001384 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b096      	sub	sp, #88	@ 0x58
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2244      	movs	r2, #68	@ 0x44
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fd55 	bl	8003e42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013aa:	f000 ff6b 	bl	8002284 <HAL_PWREx_ControlVoltageScaling>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013b4:	f000 f902 	bl	80015bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013b8:	2310      	movs	r3, #16
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80013c4:	2370      	movs	r3, #112	@ 0x70
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 ffad 	bl	8002330 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80013dc:	f000 f8ee 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	230f      	movs	r3, #15
 80013e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fb75 	bl	8002ae8 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001404:	f000 f8da 	bl	80015bc <Error_Handler>
  }
}
 8001408:	bf00      	nop
 800140a:	3758      	adds	r7, #88	@ 0x58
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <MX_SPI3_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_SPI3_Init+0x74>)
 800141c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001420:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_SPI3_Init+0x74>)
 800142a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800142e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_SPI3_Init+0x74>)
 800143e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001442:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_SPI3_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_SPI3_Init+0x74>)
 800145e:	2207      	movs	r2, #7
 8001460:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_SPI3_Init+0x74>)
 800146a:	2208      	movs	r2, #8
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_SPI3_Init+0x74>)
 8001470:	f001 fd26 	bl	8002ec0 <HAL_SPI_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800147a:	f000 f89f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002f8 	.word	0x200002f8
 8001488:	40003c00 	.word	0x40003c00

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a2:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a42      	ldr	r2, [pc, #264]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b3d      	ldr	r3, [pc, #244]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	4a3c      	ldr	r2, [pc, #240]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c6:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a36      	ldr	r2, [pc, #216]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a30      	ldr	r2, [pc, #192]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b2e      	ldr	r3, [pc, #184]	@ (80015b0 <MX_GPIO_Init+0x124>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <MX_GPIO_Init+0x124>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a2a      	ldr	r2, [pc, #168]	@ (80015b0 <MX_GPIO_Init+0x124>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <MX_GPIO_Init+0x124>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2120      	movs	r1, #32
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f000 fe55 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152c:	4821      	ldr	r0, [pc, #132]	@ (80015b4 <MX_GPIO_Init+0x128>)
 800152e:	f000 fe4f 	bl	80021d0 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153c:	f000 fe48 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001540:	2340      	movs	r3, #64	@ 0x40
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001544:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4818      	ldr	r0, [pc, #96]	@ (80015b8 <MX_GPIO_Init+0x12c>)
 8001556:	f000 fc79 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800155a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001576:	f000 fc69 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <MX_GPIO_Init+0x128>)
 8001594:	f000 fc5a 	bl	8001e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2017      	movs	r0, #23
 800159e:	f000 fc1e 	bl	8001dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a2:	2017      	movs	r0, #23
 80015a4:	f000 fc37 	bl	8001e16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d2:	4a0e      	ldr	r2, [pc, #56]	@ (800160c <HAL_MspInit+0x44>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_MspInit+0x44>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	4a08      	ldr	r2, [pc, #32]	@ (800160c <HAL_MspInit+0x44>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_MspInit+0x44>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a17      	ldr	r2, [pc, #92]	@ (800168c <HAL_SPI_MspInit+0x7c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d128      	bne.n	8001684 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	4a16      	ldr	r2, [pc, #88]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800163c:	6593      	str	r3, [r2, #88]	@ 0x58
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001662:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001674:	2306      	movs	r3, #6
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <HAL_SPI_MspInit+0x84>)
 8001680:	f000 fbe4 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40003c00 	.word	0x40003c00
 8001690:	40021000 	.word	0x40021000
 8001694:	48000800 	.word	0x48000800

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <NMI_Handler+0x4>

080016a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <MemManage_Handler+0x4>

080016b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <UsageFault_Handler+0x4>

080016c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ee:	f000 fa37 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <EXTI9_5_IRQHandler+0x14>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001702:	2040      	movs	r0, #64	@ 0x40
 8001704:	f000 fd7c 	bl	8002200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200002f4 	.word	0x200002f4

08001710 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
	}

return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <_sbrk+0x50>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x16>
		heap_end = &end;
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <_sbrk+0x50>)
 800175e:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <_sbrk+0x54>)
 8001760:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <_sbrk+0x50>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <_sbrk+0x50>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	466a      	mov	r2, sp
 8001772:	4293      	cmp	r3, r2
 8001774:	d907      	bls.n	8001786 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001776:	f002 fb7d 	bl	8003e74 <__errno>
 800177a:	4603      	mov	r3, r0
 800177c:	220c      	movs	r2, #12
 800177e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001784:	e006      	b.n	8001794 <_sbrk+0x48>
	}

	heap_end += incr;
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <_sbrk+0x50>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a03      	ldr	r2, [pc, #12]	@ (800179c <_sbrk+0x50>)
 8001790:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000374 	.word	0x20000374
 80017a0:	200004c8 	.word	0x200004c8

080017a4 <_close>:

int _close(int file)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017cc:	605a      	str	r2, [r3, #4]
	return 0;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_isatty>:

int _isatty(int file)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
	return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <SystemInit+0x64>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <SystemInit+0x64>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <SystemInit+0x68>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <SystemInit+0x68>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <SystemInit+0x68>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <SystemInit+0x68>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0f      	ldr	r2, [pc, #60]	@ (8001874 <SystemInit+0x68>)
 8001838:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800183c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001840:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <SystemInit+0x68>)
 8001844:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001848:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <SystemInit+0x68>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a09      	ldr	r2, [pc, #36]	@ (8001874 <SystemInit+0x68>)
 8001850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001854:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <SystemInit+0x68>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <SystemInit+0x64>)
 800185e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001862:	609a      	str	r2, [r3, #8]
#endif
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	40021000 	.word	0x40021000

08001878 <__NVIC_EnableIRQ>:
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	@ (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	@ (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <timer_init_lptim>:
	timer_reset_tim(timer);
	// Set the period that the timer will fire (in milliseconds). A timer interrupt should be fired for each timer period.
	timer->ARR = period_ms - 1;
}

void timer_init_lptim(LPTIM_TypeDef *timer) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    RCC->CIER |= RCC_CIER_LSIRDYIE;	 			// Enable LSI interrupt
 8001910:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <timer_init_lptim+0xf4>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a39      	ldr	r2, [pc, #228]	@ (80019fc <timer_init_lptim+0xf4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6193      	str	r3, [r2, #24]
    RCC->CSR |= RCC_CSR_LSION;					// Enable LSI
 800191c:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <timer_init_lptim+0xf4>)
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001922:	4a36      	ldr	r2, [pc, #216]	@ (80019fc <timer_init_lptim+0xf4>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    while ((RCC->CSR & RCC_CSR_LSIRDY) == 0);   // Wait for LSI to be ready
 800192c:	bf00      	nop
 800192e:	4b33      	ldr	r3, [pc, #204]	@ (80019fc <timer_init_lptim+0xf4>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f8      	beq.n	800192e <timer_init_lptim+0x26>

    RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;		// Supply power to clock
 800193c:	4b2f      	ldr	r3, [pc, #188]	@ (80019fc <timer_init_lptim+0xf4>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	4a2e      	ldr	r2, [pc, #184]	@ (80019fc <timer_init_lptim+0xf4>)
 8001942:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001946:	6593      	str	r3, [r2, #88]	@ 0x58

    RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL;			// Clear source bits
 8001948:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <timer_init_lptim+0xf4>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	4a2b      	ldr	r2, [pc, #172]	@ (80019fc <timer_init_lptim+0xf4>)
 8001950:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR |= RCC_CCIPR_LPTIM1SEL_0;		// Use LSI as clock source
 8001958:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <timer_init_lptim+0xf4>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800195e:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <timer_init_lptim+0xf4>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR &= ~RCC_CCIPR_LPTIM2SEL;
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <timer_init_lptim+0xf4>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196e:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <timer_init_lptim+0xf4>)
 8001970:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR |= RCC_CCIPR_LPTIM2SEL_0;
 8001978:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <timer_init_lptim+0xf4>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197e:	4a1f      	ldr	r2, [pc, #124]	@ (80019fc <timer_init_lptim+0xf4>)
 8001980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    timer->CR &= ~LPTIM_CR_ENABLE;				// Disable the timer
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f023 0201 	bic.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	611a      	str	r2, [r3, #16]
    while(LPTIM1->CR & LPTIM_CR_ENABLE);		// Wait for timer to be enabled
 8001994:	bf00      	nop
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <timer_init_lptim+0xf8>)
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <timer_init_lptim+0x8e>

    //clear interrupt flags
    timer->ICR = LPTIM_ICR_CMPMCF | LPTIM_ICR_ARRMCF | LPTIM_ICR_EXTTRIGCF | LPTIM_ICR_CMPOKCF | LPTIM_ICR_ARROKCF | LPTIM_ICR_DOWNCF;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	225f      	movs	r2, #95	@ 0x5f
 80019a6:	605a      	str	r2, [r3, #4]

    timer->CFGR = 0;	// Use default prescaler
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
    timer->CNT = 0;		// Clear counter
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
    timer->IER |= LPTIM_IER_ARRMIE;  // Enable ARR match interrupt
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f043 0202 	orr.w	r2, r3, #2
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
    NVIC_SetPriority(LPTIM1_IRQn, 0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2041      	movs	r0, #65	@ 0x41
 80019c4:	f7ff ff76 	bl	80018b4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(LPTIM1_IRQn);
 80019c8:	2041      	movs	r0, #65	@ 0x41
 80019ca:	f7ff ff55 	bl	8001878 <__NVIC_EnableIRQ>

    timer->CR |= LPTIM_CR_ENABLE;  // Enable timer
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]
    while(!(LPTIM1->CR & LPTIM_CR_ENABLE)); // Wait for timer to be disabled
 80019da:	bf00      	nop
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <timer_init_lptim+0xf8>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f9      	beq.n	80019dc <timer_init_lptim+0xd4>

    LPTIM1->CR |= LPTIM_CR_CNTSTRT;
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <timer_init_lptim+0xf8>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <timer_init_lptim+0xf8>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6113      	str	r3, [r2, #16]
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007c00 	.word	0x40007c00

08001a04 <timer_reset_lptim>:

void timer_reset_lptim(LPTIM_TypeDef *timer) {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    timer->CNT = 0; // Reset the counter value of LPTIM
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <timer_set_ms_lptim>:

void timer_set_ms_lptim(LPTIM_TypeDef *timer, uint16_t period_ms) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
	LPTIM1->CR &= ~LPTIM_CR_ENABLE;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <timer_set_ms_lptim+0x40>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <timer_set_ms_lptim+0x40>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6113      	str	r3, [r2, #16]
    timer_reset_lptim(timer);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffe3 	bl	8001a04 <timer_reset_lptim>
    uint32_t timer_ticks = ((uint32_t) period_ms * 32);
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	60fb      	str	r3, [r7, #12]
    timer->ARR = timer_ticks - 1;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
    LPTIM1->CR |= LPTIM_CR_ENABLE;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <timer_set_ms_lptim+0x40>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	4a03      	ldr	r2, [pc, #12]	@ (8001a60 <timer_set_ms_lptim+0x40>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6113      	str	r3, [r2, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40007c00 	.word	0x40007c00

08001a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a68:	f7ff fed0 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6e:	490d      	ldr	r1, [pc, #52]	@ (8001aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <LoopForever+0xe>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a84:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab0 <LoopForever+0x16>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a92:	f002 f9f5 	bl	8003e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a96:	f7ff fb55 	bl	8001144 <main>

08001a9a <LoopForever>:

LoopForever:
    b LoopForever
 8001a9a:	e7fe      	b.n	8001a9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8001aa8:	08004f6c 	.word	0x08004f6c
  ldr r2, =_sbss
 8001aac:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8001ab0:	200004c8 	.word	0x200004c8

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>

08001ab6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f981 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f80e 	bl	8001ae8 <HAL_InitTick>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	e001      	b.n	8001adc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad8:	f7ff fd76 	bl	80015c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001adc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001af4:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <HAL_InitTick+0x6c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d023      	beq.n	8001b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_InitTick+0x70>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <HAL_InitTick+0x6c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f98d 	bl	8001e32 <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d809      	bhi.n	8001b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b2c:	f000 f957 	bl	8001dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b30:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <HAL_InitTick+0x74>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e004      	b.n	8001b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e001      	b.n	8001b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000015c 	.word	0x2000015c
 8001b58:	20000154 	.word	0x20000154
 8001b5c:	20000158 	.word	0x20000158

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2000015c 	.word	0x2000015c
 8001b84:	20000378 	.word	0x20000378

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000378 	.word	0x20000378

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000015c 	.word	0x2000015c

08001be8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_SuspendTick+0x1c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <HAL_SuspendTick+0x1c>)
 8001bf2:	f023 0302 	bic.w	r3, r3, #2
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_ResumeTick+0x1c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_ResumeTick+0x1c>)
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <__NVIC_SetPriorityGrouping>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	@ (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	@ (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	@ (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	@ 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <SysTick_Config>:
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001da8:	f7ff ff8e 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff29 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff3e 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff8e 	bl	8001d1c <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5d 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff31 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa2 	bl	8001d84 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e17f      	b.n	800215c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8171 	beq.w	8002156 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d005      	beq.n	8001e8c <HAL_GPIO_Init+0x40>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d130      	bne.n	8001eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 0201 	and.w	r2, r3, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d118      	bne.n	8001f2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ac 	beq.w	8002156 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800217c <HAL_GPIO_Init+0x330>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	4a5e      	ldr	r2, [pc, #376]	@ (800217c <HAL_GPIO_Init+0x330>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6613      	str	r3, [r2, #96]	@ 0x60
 800200a:	4b5c      	ldr	r3, [pc, #368]	@ (800217c <HAL_GPIO_Init+0x330>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002016:	4a5a      	ldr	r2, [pc, #360]	@ (8002180 <HAL_GPIO_Init+0x334>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x242>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	@ (8002184 <HAL_GPIO_Init+0x338>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x23e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	@ (8002188 <HAL_GPIO_Init+0x33c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x23a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	@ (800218c <HAL_GPIO_Init+0x340>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x236>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	@ (8002190 <HAL_GPIO_Init+0x344>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x232>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	@ (8002194 <HAL_GPIO_Init+0x348>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x22e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4a      	ldr	r2, [pc, #296]	@ (8002198 <HAL_GPIO_Init+0x34c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x22a>
 8002072:	2306      	movs	r3, #6
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x244>
 8002076:	2307      	movs	r3, #7
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x244>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x244>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800208e:	2300      	movs	r3, #0
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a0:	4937      	ldr	r1, [pc, #220]	@ (8002180 <HAL_GPIO_Init+0x334>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ae:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d2:	4a32      	ldr	r2, [pc, #200]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020d8:	4b30      	ldr	r3, [pc, #192]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020fc:	4a27      	ldr	r2, [pc, #156]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002102:	4b26      	ldr	r3, [pc, #152]	@ (800219c <HAL_GPIO_Init+0x350>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002126:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <HAL_GPIO_Init+0x350>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800212c:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_GPIO_Init+0x350>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002150:	4a12      	ldr	r2, [pc, #72]	@ (800219c <HAL_GPIO_Init+0x350>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	f47f ae78 	bne.w	8001e5c <HAL_GPIO_Init+0x10>
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	48000400 	.word	0x48000400
 8002188:	48000800 	.word	0x48000800
 800218c:	48000c00 	.word	0x48000c00
 8002190:	48001000 	.word	0x48001000
 8002194:	48001400 	.word	0x48001400
 8002198:	48001800 	.word	0x48001800
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e001      	b.n	80021c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f806 	bl	8002230 <HAL_GPIO_EXTI_Callback>
  }
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8002252:	f023 0302 	bic.w	r3, r3, #2
 8002256:	6113      	str	r3, [r2, #16]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800226c:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <HAL_PWREx_GetVoltageRange+0x18>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40007000 	.word	0x40007000

08002284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002292:	d130      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800229c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022a0:	d038      	beq.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2232      	movs	r2, #50	@ 0x32
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	4a1b      	ldr	r2, [pc, #108]	@ (800232c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0c9b      	lsrs	r3, r3, #18
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c8:	e002      	b.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022dc:	d102      	bne.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f2      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f0:	d110      	bne.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e00f      	b.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002302:	d007      	beq.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002304:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800230c:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40007000 	.word	0x40007000
 8002328:	20000154 	.word	0x20000154
 800232c:	431bde83 	.word	0x431bde83

08002330 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e3ca      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002342:	4b97      	ldr	r3, [pc, #604]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234c:	4b94      	ldr	r3, [pc, #592]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80e4 	beq.w	800252c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_RCC_OscConfig+0x4a>
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	f040 808b 	bne.w	8002488 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b01      	cmp	r3, #1
 8002376:	f040 8087 	bne.w	8002488 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800237a:	4b89      	ldr	r3, [pc, #548]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_RCC_OscConfig+0x62>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e3a2      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	4b82      	ldr	r3, [pc, #520]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_RCC_OscConfig+0x7c>
 80023a2:	4b7f      	ldr	r3, [pc, #508]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023aa:	e005      	b.n	80023b8 <HAL_RCC_OscConfig+0x88>
 80023ac:	4b7c      	ldr	r3, [pc, #496]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d223      	bcs.n	8002404 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fd1d 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e383      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d0:	4b73      	ldr	r3, [pc, #460]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a72      	ldr	r2, [pc, #456]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b70      	ldr	r3, [pc, #448]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	496d      	ldr	r1, [pc, #436]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ee:	4b6c      	ldr	r3, [pc, #432]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	4968      	ldr	r1, [pc, #416]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 8002402:	e025      	b.n	8002450 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002404:	4b66      	ldr	r3, [pc, #408]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a65      	ldr	r2, [pc, #404]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b63      	ldr	r3, [pc, #396]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4960      	ldr	r1, [pc, #384]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002422:	4b5f      	ldr	r3, [pc, #380]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	495b      	ldr	r1, [pc, #364]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fcdd 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e343      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002450:	f000 fc4a 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b52      	ldr	r3, [pc, #328]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	4950      	ldr	r1, [pc, #320]	@ (80025a4 <HAL_RCC_OscConfig+0x274>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	4a4e      	ldr	r2, [pc, #312]	@ (80025a8 <HAL_RCC_OscConfig+0x278>)
 800246e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002470:	4b4e      	ldr	r3, [pc, #312]	@ (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb37 	bl	8001ae8 <HAL_InitTick>
 800247a:	4603      	mov	r3, r0
 800247c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d052      	beq.n	800252a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	e327      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d032      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002490:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a42      	ldr	r2, [pc, #264]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800249c:	f7ff fb74 	bl	8001b88 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a4:	f7ff fb70 	bl	8001b88 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e310      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b6:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c2:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a36      	ldr	r2, [pc, #216]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024c8:	f043 0308 	orr.w	r3, r3, #8
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4931      	ldr	r1, [pc, #196]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e0:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	492c      	ldr	r1, [pc, #176]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
 80024f4:	e01a      	b.n	800252c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a29      	ldr	r2, [pc, #164]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002502:	f7ff fb41 	bl	8001b88 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800250a:	f7ff fb3d 	bl	8001b88 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e2dd      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x1da>
 8002528:	e000      	b.n	800252c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800252a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d074      	beq.n	8002622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b08      	cmp	r3, #8
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x21a>
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d10e      	bne.n	8002562 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d064      	beq.n	8002620 <HAL_RCC_OscConfig+0x2f0>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d160      	bne.n	8002620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e2ba      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x24a>
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e026      	b.n	80025c8 <HAL_RCC_OscConfig+0x298>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002582:	d115      	bne.n	80025b0 <HAL_RCC_OscConfig+0x280>
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 800258a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a02      	ldr	r2, [pc, #8]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	e014      	b.n	80025c8 <HAL_RCC_OscConfig+0x298>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08004ee8 	.word	0x08004ee8
 80025a8:	20000154 	.word	0x20000154
 80025ac:	20000158 	.word	0x20000158
 80025b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a9f      	ldr	r2, [pc, #636]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b9d      	ldr	r3, [pc, #628]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a9c      	ldr	r2, [pc, #624]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff fada 	bl	8001b88 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fad6 	bl	8001b88 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	@ 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e276      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ea:	4b92      	ldr	r3, [pc, #584]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2a8>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fac6 	bl	8001b88 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff fac2 	bl	8001b88 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e262      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002612:	4b88      	ldr	r3, [pc, #544]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x2d0>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d060      	beq.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x310>
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d119      	bne.n	800266e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d116      	bne.n	800266e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002640:	4b7c      	ldr	r3, [pc, #496]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_OscConfig+0x328>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e23f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b76      	ldr	r3, [pc, #472]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	4973      	ldr	r1, [pc, #460]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266c:	e040      	b.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d023      	beq.n	80026be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002676:	4b6f      	ldr	r3, [pc, #444]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6e      	ldr	r2, [pc, #440]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7ff fa81 	bl	8001b88 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff fa7d 	bl	8001b88 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e21d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800269c:	4b65      	ldr	r3, [pc, #404]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b62      	ldr	r3, [pc, #392]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	495f      	ldr	r1, [pc, #380]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	e018      	b.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80026c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7ff fa5d 	bl	8001b88 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d2:	f7ff fa59 	bl	8001b88 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1f9      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026e4:	4b53      	ldr	r3, [pc, #332]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d03c      	beq.n	8002776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01c      	beq.n	800273e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002704:	4b4b      	ldr	r3, [pc, #300]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270a:	4a4a      	ldr	r2, [pc, #296]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7ff fa38 	bl	8001b88 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7ff fa34 	bl	8001b88 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1d4      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800272e:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ef      	beq.n	800271c <HAL_RCC_OscConfig+0x3ec>
 800273c:	e01b      	b.n	8002776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273e:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002744:	4a3b      	ldr	r2, [pc, #236]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7ff fa1b 	bl	8001b88 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002756:	f7ff fa17 	bl	8001b88 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1b7      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002768:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 800276a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ef      	bne.n	8002756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80a6 	beq.w	80028d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002788:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b27      	ldr	r3, [pc, #156]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	4a26      	ldr	r2, [pc, #152]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	@ 0x58
 80027a0:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b0:	4b21      	ldr	r3, [pc, #132]	@ (8002838 <HAL_RCC_OscConfig+0x508>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d118      	bne.n	80027ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_RCC_OscConfig+0x508>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <HAL_RCC_OscConfig+0x508>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c8:	f7ff f9de 	bl	8001b88 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d0:	f7ff f9da 	bl	8001b88 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e17a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <HAL_RCC_OscConfig+0x508>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x4d8>
 80027f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002806:	e029      	b.n	800285c <HAL_RCC_OscConfig+0x52c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d115      	bne.n	800283c <HAL_RCC_OscConfig+0x50c>
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	4a07      	ldr	r2, [pc, #28]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002826:	4a03      	ldr	r2, [pc, #12]	@ (8002834 <HAL_RCC_OscConfig+0x504>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002830:	e014      	b.n	800285c <HAL_RCC_OscConfig+0x52c>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
 800283c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a9b      	ldr	r2, [pc, #620]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800284c:	4b98      	ldr	r3, [pc, #608]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	4a97      	ldr	r2, [pc, #604]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d016      	beq.n	8002892 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7ff f990 	bl	8001b88 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7ff f98c 	bl	8001b88 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e12a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ed      	beq.n	800286c <HAL_RCC_OscConfig+0x53c>
 8002890:	e015      	b.n	80028be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7ff f979 	bl	8001b88 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7ff f975 	bl	8001b88 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e113      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ed      	bne.n	800289a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028be:	7ffb      	ldrb	r3, [r7, #31]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	4a79      	ldr	r2, [pc, #484]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80fe 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	2b02      	cmp	r3, #2
 80028e0:	f040 80d0 	bne.w	8002a84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028e4:	4b72      	ldr	r3, [pc, #456]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d130      	bne.n	800295a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	3b01      	subs	r3, #1
 8002904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d127      	bne.n	800295a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d11f      	bne.n	800295a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002924:	2a07      	cmp	r2, #7
 8002926:	bf14      	ite	ne
 8002928:	2201      	movne	r2, #1
 800292a:	2200      	moveq	r2, #0
 800292c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292e:	4293      	cmp	r3, r2
 8002930:	d113      	bne.n	800295a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	3b01      	subs	r3, #1
 8002940:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d109      	bne.n	800295a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d06e      	beq.n	8002a38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d069      	beq.n	8002a34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002960:	4b53      	ldr	r3, [pc, #332]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800296c:	4b50      	ldr	r3, [pc, #320]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0ad      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800297c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a4b      	ldr	r2, [pc, #300]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002988:	f7ff f8fe 	bl	8001b88 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7ff f8fa 	bl	8001b88 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e09a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a2:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ae:	4b40      	ldr	r3, [pc, #256]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	4b40      	ldr	r3, [pc, #256]	@ (8002ab4 <HAL_RCC_OscConfig+0x784>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029be:	3a01      	subs	r2, #1
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	4311      	orrs	r1, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029c8:	0212      	lsls	r2, r2, #8
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029d0:	0852      	lsrs	r2, r2, #1
 80029d2:	3a01      	subs	r2, #1
 80029d4:	0552      	lsls	r2, r2, #21
 80029d6:	4311      	orrs	r1, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029dc:	0852      	lsrs	r2, r2, #1
 80029de:	3a01      	subs	r2, #1
 80029e0:	0652      	lsls	r2, r2, #25
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029e8:	0912      	lsrs	r2, r2, #4
 80029ea:	0452      	lsls	r2, r2, #17
 80029ec:	430a      	orrs	r2, r1
 80029ee:	4930      	ldr	r1, [pc, #192]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029f4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 80029fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a00:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a0c:	f7ff f8bc 	bl	8001b88 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7ff f8b8 	bl	8001b88 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e058      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a26:	4b22      	ldr	r3, [pc, #136]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a32:	e050      	b.n	8002ad6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e04f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a38:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d148      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a44:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a50:	4b17      	ldr	r3, [pc, #92]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a16      	ldr	r2, [pc, #88]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a5c:	f7ff f894 	bl	8001b88 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff f890 	bl	8001b88 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e030      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x734>
 8002a82:	e028      	b.n	8002ad6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d023      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <HAL_RCC_OscConfig+0x780>)
 8002a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7ff f877 	bl	8001b88 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9c:	e00c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7ff f873 	bl	8001b88 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d905      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e013      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_RCC_OscConfig+0x7b0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ec      	bne.n	8002a9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_RCC_OscConfig+0x7b0>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4905      	ldr	r1, [pc, #20]	@ (8002ae0 <HAL_RCC_OscConfig+0x7b0>)
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_RCC_OscConfig+0x7b4>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
 8002ad0:	e001      	b.n	8002ad6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	feeefffc 	.word	0xfeeefffc

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0e7      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b75      	ldr	r3, [pc, #468]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d910      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b72      	ldr	r3, [pc, #456]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	4970      	ldr	r1, [pc, #448]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0cf      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d908      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b63      	ldr	r3, [pc, #396]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4960      	ldr	r1, [pc, #384]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04c      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d121      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0a6      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b86:	4b54      	ldr	r3, [pc, #336]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e09a      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e08e      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e086      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b46      	ldr	r3, [pc, #280]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4943      	ldr	r1, [pc, #268]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe ffda 	bl	8001b88 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe ffd6 	bl	8001b88 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e06e      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d208      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	492b      	ldr	r1, [pc, #172]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2e:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d210      	bcs.n	8002c5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 0207 	bic.w	r2, r3, #7
 8002c44:	4923      	ldr	r1, [pc, #140]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	4b21      	ldr	r3, [pc, #132]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e036      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4918      	ldr	r1, [pc, #96]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4910      	ldr	r1, [pc, #64]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9c:	f000 f824 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	490b      	ldr	r1, [pc, #44]	@ (8002cdc <HAL_RCC_ClockConfig+0x1f4>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1fc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe ff11 	bl	8001ae8 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cca:	7afb      	ldrb	r3, [r7, #11]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08004ee8 	.word	0x08004ee8
 8002ce0:	20000154 	.word	0x20000154
 8002ce4:	20000158 	.word	0x20000158

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x34>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d121      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d11e      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d1c:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d28:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e005      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d38:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10d      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d60:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e004      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d134      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d003      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xac>
 8002d8c:	e005      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d90:	617b      	str	r3, [r7, #20]
      break;
 8002d92:	e005      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d96:	617b      	str	r3, [r7, #20]
      break;
 8002d98:	e002      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	617b      	str	r3, [r7, #20]
      break;
 8002d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	3301      	adds	r3, #1
 8002dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	fb03 f202 	mul.w	r2, r3, r2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	0e5b      	lsrs	r3, r3, #25
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002de0:	69bb      	ldr	r3, [r7, #24]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	@ 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08004ef8 	.word	0x08004ef8
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e18:	f7ff fa26 	bl	8002268 <HAL_PWREx_GetVoltageRange>
 8002e1c:	6178      	str	r0, [r7, #20]
 8002e1e:	e014      	b.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e20:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	4a24      	ldr	r2, [pc, #144]	@ (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e2c:	4b22      	ldr	r3, [pc, #136]	@ (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e38:	f7ff fa16 	bl	8002268 <HAL_PWREx_GetVoltageRange>
 8002e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e42:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e50:	d10b      	bne.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b80      	cmp	r3, #128	@ 0x80
 8002e56:	d919      	bls.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e5c:	d902      	bls.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e5e:	2302      	movs	r3, #2
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	e013      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e64:	2301      	movs	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	e010      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b80      	cmp	r3, #128	@ 0x80
 8002e6e:	d902      	bls.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e70:	2303      	movs	r3, #3
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	e00a      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b80      	cmp	r3, #128	@ 0x80
 8002e7a:	d102      	bne.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e004      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b70      	cmp	r3, #112	@ 0x70
 8002e86:	d101      	bne.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e88:	2301      	movs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 0207 	bic.w	r2, r3, #7
 8002e94:	4909      	ldr	r1, [pc, #36]	@ (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d001      	beq.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40022000 	.word	0x40022000

08002ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e095      	b.n	8002ffe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ee2:	d009      	beq.n	8002ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
 8002eea:	e005      	b.n	8002ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe fb7c 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f38:	d902      	bls.n	8002f40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e002      	b.n	8002f46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f4e:	d007      	beq.n	8002f60 <HAL_SPI_Init+0xa0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f58:	d002      	beq.n	8002f60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa2:	ea42 0103 	orr.w	r1, r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	f003 0204 	and.w	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fdc:	ea42 0103 	orr.w	r1, r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b088      	sub	sp, #32
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_SPI_Transmit+0x22>
 8003024:	2302      	movs	r3, #2
 8003026:	e15f      	b.n	80032e8 <HAL_SPI_Transmit+0x2e2>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003030:	f7fe fdaa 	bl	8001b88 <HAL_GetTick>
 8003034:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d002      	beq.n	800304c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800304a:	e148      	b.n	80032de <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Transmit+0x52>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800305c:	e13f      	b.n	80032de <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a8:	d10f      	bne.n	80030ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b40      	cmp	r3, #64	@ 0x40
 80030d6:	d007      	beq.n	80030e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030f0:	d94f      	bls.n	8003192 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_Transmit+0xfa>
 80030fa:	8afb      	ldrh	r3, [r7, #22]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d142      	bne.n	8003186 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	1c9a      	adds	r2, r3, #2
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003124:	e02f      	b.n	8003186 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d112      	bne.n	800315a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	881a      	ldrh	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003144:	1c9a      	adds	r2, r3, #2
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003158:	e015      	b.n	8003186 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800315a:	f7fe fd15 	bl	8001b88 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d803      	bhi.n	8003172 <HAL_SPI_Transmit+0x16c>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003170:	d102      	bne.n	8003178 <HAL_SPI_Transmit+0x172>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003184:	e0ab      	b.n	80032de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ca      	bne.n	8003126 <HAL_SPI_Transmit+0x120>
 8003190:	e080      	b.n	8003294 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Transmit+0x19a>
 800319a:	8afb      	ldrh	r3, [r7, #22]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d174      	bne.n	800328a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d912      	bls.n	80031d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	1c9a      	adds	r2, r3, #2
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b02      	subs	r3, #2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ce:	e05c      	b.n	800328a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031f6:	e048      	b.n	800328a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d12b      	bne.n	800325e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d912      	bls.n	8003236 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b02      	subs	r3, #2
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003234:	e029      	b.n	800328a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800325c:	e015      	b.n	800328a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325e:	f7fe fc93 	bl	8001b88 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d803      	bhi.n	8003276 <HAL_SPI_Transmit+0x270>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003274:	d102      	bne.n	800327c <HAL_SPI_Transmit+0x276>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003288:	e029      	b.n	80032de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1b1      	bne.n	80031f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fb69 	bl	8003970 <SPI_EndRxTxTransaction>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e003      	b.n	80032de <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032fe:	2301      	movs	r3, #1
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x26>
 8003312:	2302      	movs	r3, #2
 8003314:	e20a      	b.n	800372c <HAL_SPI_TransmitReceive+0x43c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800331e:	f7fe fc33 	bl	8001b88 <HAL_GetTick>
 8003322:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800332a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800333a:	7efb      	ldrb	r3, [r7, #27]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d00e      	beq.n	800335e <HAL_SPI_TransmitReceive+0x6e>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003346:	d106      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x66>
 8003350:	7efb      	ldrb	r3, [r7, #27]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d003      	beq.n	800335e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003356:	2302      	movs	r3, #2
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800335c:	e1e0      	b.n	8003720 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x80>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x80>
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003376:	e1d3      	b.n	8003720 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b04      	cmp	r3, #4
 8003382:	d003      	beq.n	800338c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2205      	movs	r2, #5
 8003388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	887a      	ldrh	r2, [r7, #2]
 80033b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033ce:	d802      	bhi.n	80033d6 <HAL_SPI_TransmitReceive+0xe6>
 80033d0:	8a3b      	ldrh	r3, [r7, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d908      	bls.n	80033e8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	e007      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	d007      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800341e:	f240 8081 	bls.w	8003524 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x140>
 800342a:	8a7b      	ldrh	r3, [r7, #18]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d16d      	bne.n	800350c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003454:	e05a      	b.n	800350c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	d11b      	bne.n	800349c <HAL_SPI_TransmitReceive+0x1ac>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_SPI_TransmitReceive+0x1ac>
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	2b01      	cmp	r3, #1
 8003472:	d113      	bne.n	800349c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d11c      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x1f4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	b292      	uxth	r2, r2
 80034c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034e0:	2301      	movs	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034e4:	f7fe fb50 	bl	8001b88 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d80b      	bhi.n	800350c <HAL_SPI_TransmitReceive+0x21c>
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034fa:	d007      	beq.n	800350c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800350a:	e109      	b.n	8003720 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d19f      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x166>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d199      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x166>
 8003522:	e0e3      	b.n	80036ec <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x244>
 800352c:	8a7b      	ldrh	r3, [r7, #18]
 800352e:	2b01      	cmp	r3, #1
 8003530:	f040 80cf 	bne.w	80036d2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d912      	bls.n	8003564 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003542:	881a      	ldrh	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354e:	1c9a      	adds	r2, r3, #2
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b02      	subs	r3, #2
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003562:	e0b6      	b.n	80036d2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358a:	e0a2      	b.n	80036d2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d134      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x314>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02f      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x314>
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d12c      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d912      	bls.n	80035da <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	881a      	ldrh	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	1c9a      	adds	r2, r3, #2
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b02      	subs	r3, #2
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035d8:	e012      	b.n	8003600 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d148      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x3b4>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d042      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b01      	cmp	r3, #1
 8003628:	d923      	bls.n	8003672 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	b292      	uxth	r2, r2
 8003636:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	1c9a      	adds	r2, r3, #2
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b02      	subs	r3, #2
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d81f      	bhi.n	80036a0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	e016      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f103 020c 	add.w	r2, r3, #12
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	7812      	ldrb	r2, [r2, #0]
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036a0:	2301      	movs	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036a4:	f7fe fa70 	bl	8001b88 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d803      	bhi.n	80036bc <HAL_SPI_TransmitReceive+0x3cc>
 80036b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x3d2>
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80036d0:	e026      	b.n	8003720 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af57 	bne.w	800358c <HAL_SPI_TransmitReceive+0x29c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f47f af50 	bne.w	800358c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f93d 	bl	8003970 <SPI_EndRxTxTransaction>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003716:	e003      	b.n	8003720 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800372c:	4618      	mov	r0, r3
 800372e:	3728      	adds	r7, #40	@ 0x28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003744:	f7fe fa20 	bl	8001b88 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4413      	add	r3, r2
 8003752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003754:	f7fe fa18 	bl	8001b88 <HAL_GetTick>
 8003758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800375a:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	0d1b      	lsrs	r3, r3, #20
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800376a:	e054      	b.n	8003816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003772:	d050      	beq.n	8003816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003774:	f7fe fa08 	bl	8001b88 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	429a      	cmp	r2, r3
 8003782:	d902      	bls.n	800378a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d13d      	bne.n	8003806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037a2:	d111      	bne.n	80037c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ac:	d004      	beq.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b6:	d107      	bne.n	80037c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d0:	d10f      	bne.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e017      	b.n	8003836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3b01      	subs	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	429a      	cmp	r2, r3
 8003832:	d19b      	bne.n	800376c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000154 	.word	0x20000154

08003844 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	@ 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003856:	f7fe f997 	bl	8001b88 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	4413      	add	r3, r2
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003866:	f7fe f98f 	bl	8001b88 <HAL_GetTick>
 800386a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003874:	4b3d      	ldr	r3, [pc, #244]	@ (800396c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00da      	lsls	r2, r3, #3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	0d1b      	lsrs	r3, r3, #20
 8003884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800388c:	e060      	b.n	8003950 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003894:	d107      	bne.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ac:	d050      	beq.n	8003950 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ae:	f7fe f96b 	bl	8001b88 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d902      	bls.n	80038c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d13d      	bne.n	8003940 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038dc:	d111      	bne.n	8003902 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e6:	d004      	beq.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f0:	d107      	bne.n	8003902 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800390a:	d10f      	bne.n	800392c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800392a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e010      	b.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3b01      	subs	r3, #1
 800394e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d196      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3728      	adds	r7, #40	@ 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000154 	.word	0x20000154

08003970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f7ff ff5b 	bl	8003844 <SPI_WaitFifoStateUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e027      	b.n	80039f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	2180      	movs	r1, #128	@ 0x80
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fec0 	bl	8003734 <SPI_WaitFlagStateUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e014      	b.n	80039f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff ff34 	bl	8003844 <SPI_WaitFifoStateUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e000      	b.n	80039f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <malloc>:
 80039fc:	4b02      	ldr	r3, [pc, #8]	@ (8003a08 <malloc+0xc>)
 80039fe:	4601      	mov	r1, r0
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	f000 b82d 	b.w	8003a60 <_malloc_r>
 8003a06:	bf00      	nop
 8003a08:	2000016c 	.word	0x2000016c

08003a0c <free>:
 8003a0c:	4b02      	ldr	r3, [pc, #8]	@ (8003a18 <free+0xc>)
 8003a0e:	4601      	mov	r1, r0
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	f000 ba6b 	b.w	8003eec <_free_r>
 8003a16:	bf00      	nop
 8003a18:	2000016c 	.word	0x2000016c

08003a1c <sbrk_aligned>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8003a5c <sbrk_aligned+0x40>)
 8003a20:	460c      	mov	r4, r1
 8003a22:	6831      	ldr	r1, [r6, #0]
 8003a24:	4605      	mov	r5, r0
 8003a26:	b911      	cbnz	r1, 8003a2e <sbrk_aligned+0x12>
 8003a28:	f000 fa14 	bl	8003e54 <_sbrk_r>
 8003a2c:	6030      	str	r0, [r6, #0]
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 fa0f 	bl	8003e54 <_sbrk_r>
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	d103      	bne.n	8003a42 <sbrk_aligned+0x26>
 8003a3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003a3e:	4620      	mov	r0, r4
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	1cc4      	adds	r4, r0, #3
 8003a44:	f024 0403 	bic.w	r4, r4, #3
 8003a48:	42a0      	cmp	r0, r4
 8003a4a:	d0f8      	beq.n	8003a3e <sbrk_aligned+0x22>
 8003a4c:	1a21      	subs	r1, r4, r0
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 fa00 	bl	8003e54 <_sbrk_r>
 8003a54:	3001      	adds	r0, #1
 8003a56:	d1f2      	bne.n	8003a3e <sbrk_aligned+0x22>
 8003a58:	e7ef      	b.n	8003a3a <sbrk_aligned+0x1e>
 8003a5a:	bf00      	nop
 8003a5c:	2000037c 	.word	0x2000037c

08003a60 <_malloc_r>:
 8003a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a64:	1ccd      	adds	r5, r1, #3
 8003a66:	f025 0503 	bic.w	r5, r5, #3
 8003a6a:	3508      	adds	r5, #8
 8003a6c:	2d0c      	cmp	r5, #12
 8003a6e:	bf38      	it	cc
 8003a70:	250c      	movcc	r5, #12
 8003a72:	2d00      	cmp	r5, #0
 8003a74:	4606      	mov	r6, r0
 8003a76:	db01      	blt.n	8003a7c <_malloc_r+0x1c>
 8003a78:	42a9      	cmp	r1, r5
 8003a7a:	d904      	bls.n	8003a86 <_malloc_r+0x26>
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	6033      	str	r3, [r6, #0]
 8003a80:	2000      	movs	r0, #0
 8003a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b5c <_malloc_r+0xfc>
 8003a8a:	f000 f869 	bl	8003b60 <__malloc_lock>
 8003a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a92:	461c      	mov	r4, r3
 8003a94:	bb44      	cbnz	r4, 8003ae8 <_malloc_r+0x88>
 8003a96:	4629      	mov	r1, r5
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f7ff ffbf 	bl	8003a1c <sbrk_aligned>
 8003a9e:	1c43      	adds	r3, r0, #1
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	d158      	bne.n	8003b56 <_malloc_r+0xf6>
 8003aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8003aa8:	4627      	mov	r7, r4
 8003aaa:	2f00      	cmp	r7, #0
 8003aac:	d143      	bne.n	8003b36 <_malloc_r+0xd6>
 8003aae:	2c00      	cmp	r4, #0
 8003ab0:	d04b      	beq.n	8003b4a <_malloc_r+0xea>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	4639      	mov	r1, r7
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	eb04 0903 	add.w	r9, r4, r3
 8003abc:	f000 f9ca 	bl	8003e54 <_sbrk_r>
 8003ac0:	4581      	cmp	r9, r0
 8003ac2:	d142      	bne.n	8003b4a <_malloc_r+0xea>
 8003ac4:	6821      	ldr	r1, [r4, #0]
 8003ac6:	1a6d      	subs	r5, r5, r1
 8003ac8:	4629      	mov	r1, r5
 8003aca:	4630      	mov	r0, r6
 8003acc:	f7ff ffa6 	bl	8003a1c <sbrk_aligned>
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d03a      	beq.n	8003b4a <_malloc_r+0xea>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	442b      	add	r3, r5
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	f8d8 3000 	ldr.w	r3, [r8]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	bb62      	cbnz	r2, 8003b3c <_malloc_r+0xdc>
 8003ae2:	f8c8 7000 	str.w	r7, [r8]
 8003ae6:	e00f      	b.n	8003b08 <_malloc_r+0xa8>
 8003ae8:	6822      	ldr	r2, [r4, #0]
 8003aea:	1b52      	subs	r2, r2, r5
 8003aec:	d420      	bmi.n	8003b30 <_malloc_r+0xd0>
 8003aee:	2a0b      	cmp	r2, #11
 8003af0:	d917      	bls.n	8003b22 <_malloc_r+0xc2>
 8003af2:	1961      	adds	r1, r4, r5
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	6025      	str	r5, [r4, #0]
 8003af8:	bf18      	it	ne
 8003afa:	6059      	strne	r1, [r3, #4]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	bf08      	it	eq
 8003b00:	f8c8 1000 	streq.w	r1, [r8]
 8003b04:	5162      	str	r2, [r4, r5]
 8003b06:	604b      	str	r3, [r1, #4]
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f000 f82f 	bl	8003b6c <__malloc_unlock>
 8003b0e:	f104 000b 	add.w	r0, r4, #11
 8003b12:	1d23      	adds	r3, r4, #4
 8003b14:	f020 0007 	bic.w	r0, r0, #7
 8003b18:	1ac2      	subs	r2, r0, r3
 8003b1a:	bf1c      	itt	ne
 8003b1c:	1a1b      	subne	r3, r3, r0
 8003b1e:	50a3      	strne	r3, [r4, r2]
 8003b20:	e7af      	b.n	8003a82 <_malloc_r+0x22>
 8003b22:	6862      	ldr	r2, [r4, #4]
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	bf0c      	ite	eq
 8003b28:	f8c8 2000 	streq.w	r2, [r8]
 8003b2c:	605a      	strne	r2, [r3, #4]
 8003b2e:	e7eb      	b.n	8003b08 <_malloc_r+0xa8>
 8003b30:	4623      	mov	r3, r4
 8003b32:	6864      	ldr	r4, [r4, #4]
 8003b34:	e7ae      	b.n	8003a94 <_malloc_r+0x34>
 8003b36:	463c      	mov	r4, r7
 8003b38:	687f      	ldr	r7, [r7, #4]
 8003b3a:	e7b6      	b.n	8003aaa <_malloc_r+0x4a>
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	d1fb      	bne.n	8003b3c <_malloc_r+0xdc>
 8003b44:	2300      	movs	r3, #0
 8003b46:	6053      	str	r3, [r2, #4]
 8003b48:	e7de      	b.n	8003b08 <_malloc_r+0xa8>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	6033      	str	r3, [r6, #0]
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f000 f80c 	bl	8003b6c <__malloc_unlock>
 8003b54:	e794      	b.n	8003a80 <_malloc_r+0x20>
 8003b56:	6005      	str	r5, [r0, #0]
 8003b58:	e7d6      	b.n	8003b08 <_malloc_r+0xa8>
 8003b5a:	bf00      	nop
 8003b5c:	20000380 	.word	0x20000380

08003b60 <__malloc_lock>:
 8003b60:	4801      	ldr	r0, [pc, #4]	@ (8003b68 <__malloc_lock+0x8>)
 8003b62:	f000 b9b2 	b.w	8003eca <__retarget_lock_acquire_recursive>
 8003b66:	bf00      	nop
 8003b68:	200004c0 	.word	0x200004c0

08003b6c <__malloc_unlock>:
 8003b6c:	4801      	ldr	r0, [pc, #4]	@ (8003b74 <__malloc_unlock+0x8>)
 8003b6e:	f000 b9ad 	b.w	8003ecc <__retarget_lock_release_recursive>
 8003b72:	bf00      	nop
 8003b74:	200004c0 	.word	0x200004c0

08003b78 <siprintf>:
 8003b78:	b40e      	push	{r1, r2, r3}
 8003b7a:	b500      	push	{lr}
 8003b7c:	b09c      	sub	sp, #112	@ 0x70
 8003b7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b80:	9002      	str	r0, [sp, #8]
 8003b82:	9006      	str	r0, [sp, #24]
 8003b84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b88:	4809      	ldr	r0, [pc, #36]	@ (8003bb0 <siprintf+0x38>)
 8003b8a:	9107      	str	r1, [sp, #28]
 8003b8c:	9104      	str	r1, [sp, #16]
 8003b8e:	4909      	ldr	r1, [pc, #36]	@ (8003bb4 <siprintf+0x3c>)
 8003b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b94:	9105      	str	r1, [sp, #20]
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	a902      	add	r1, sp, #8
 8003b9c:	f000 fa4c 	bl	8004038 <_svfiprintf_r>
 8003ba0:	9b02      	ldr	r3, [sp, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	b01c      	add	sp, #112	@ 0x70
 8003ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bac:	b003      	add	sp, #12
 8003bae:	4770      	bx	lr
 8003bb0:	2000016c 	.word	0x2000016c
 8003bb4:	ffff0208 	.word	0xffff0208

08003bb8 <std>:
 8003bb8:	2300      	movs	r3, #0
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8003bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bc6:	6083      	str	r3, [r0, #8]
 8003bc8:	8181      	strh	r1, [r0, #12]
 8003bca:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bcc:	81c2      	strh	r2, [r0, #14]
 8003bce:	6183      	str	r3, [r0, #24]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	305c      	adds	r0, #92	@ 0x5c
 8003bd6:	f000 f934 	bl	8003e42 <memset>
 8003bda:	4b0d      	ldr	r3, [pc, #52]	@ (8003c10 <std+0x58>)
 8003bdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003bde:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <std+0x5c>)
 8003be0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <std+0x60>)
 8003be4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003be6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <std+0x64>)
 8003be8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <std+0x68>)
 8003bec:	6224      	str	r4, [r4, #32]
 8003bee:	429c      	cmp	r4, r3
 8003bf0:	d006      	beq.n	8003c00 <std+0x48>
 8003bf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bf6:	4294      	cmp	r4, r2
 8003bf8:	d002      	beq.n	8003c00 <std+0x48>
 8003bfa:	33d0      	adds	r3, #208	@ 0xd0
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	d105      	bne.n	8003c0c <std+0x54>
 8003c00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c08:	f000 b95e 	b.w	8003ec8 <__retarget_lock_init_recursive>
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	bf00      	nop
 8003c10:	08004929 	.word	0x08004929
 8003c14:	0800494b 	.word	0x0800494b
 8003c18:	08004983 	.word	0x08004983
 8003c1c:	080049a7 	.word	0x080049a7
 8003c20:	20000384 	.word	0x20000384

08003c24 <stdio_exit_handler>:
 8003c24:	4a02      	ldr	r2, [pc, #8]	@ (8003c30 <stdio_exit_handler+0xc>)
 8003c26:	4903      	ldr	r1, [pc, #12]	@ (8003c34 <stdio_exit_handler+0x10>)
 8003c28:	4803      	ldr	r0, [pc, #12]	@ (8003c38 <stdio_exit_handler+0x14>)
 8003c2a:	f000 b869 	b.w	8003d00 <_fwalk_sglue>
 8003c2e:	bf00      	nop
 8003c30:	20000160 	.word	0x20000160
 8003c34:	080048d9 	.word	0x080048d9
 8003c38:	20000170 	.word	0x20000170

08003c3c <cleanup_stdio>:
 8003c3c:	6841      	ldr	r1, [r0, #4]
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <cleanup_stdio+0x34>)
 8003c40:	4299      	cmp	r1, r3
 8003c42:	b510      	push	{r4, lr}
 8003c44:	4604      	mov	r4, r0
 8003c46:	d001      	beq.n	8003c4c <cleanup_stdio+0x10>
 8003c48:	f000 fe46 	bl	80048d8 <_fflush_r>
 8003c4c:	68a1      	ldr	r1, [r4, #8]
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <cleanup_stdio+0x38>)
 8003c50:	4299      	cmp	r1, r3
 8003c52:	d002      	beq.n	8003c5a <cleanup_stdio+0x1e>
 8003c54:	4620      	mov	r0, r4
 8003c56:	f000 fe3f 	bl	80048d8 <_fflush_r>
 8003c5a:	68e1      	ldr	r1, [r4, #12]
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <cleanup_stdio+0x3c>)
 8003c5e:	4299      	cmp	r1, r3
 8003c60:	d004      	beq.n	8003c6c <cleanup_stdio+0x30>
 8003c62:	4620      	mov	r0, r4
 8003c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c68:	f000 be36 	b.w	80048d8 <_fflush_r>
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000384 	.word	0x20000384
 8003c74:	200003ec 	.word	0x200003ec
 8003c78:	20000454 	.word	0x20000454

08003c7c <global_stdio_init.part.0>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <global_stdio_init.part.0+0x30>)
 8003c80:	4c0b      	ldr	r4, [pc, #44]	@ (8003cb0 <global_stdio_init.part.0+0x34>)
 8003c82:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb4 <global_stdio_init.part.0+0x38>)
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	4620      	mov	r0, r4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	f7ff ff94 	bl	8003bb8 <std>
 8003c90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c94:	2201      	movs	r2, #1
 8003c96:	2109      	movs	r1, #9
 8003c98:	f7ff ff8e 	bl	8003bb8 <std>
 8003c9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca6:	2112      	movs	r1, #18
 8003ca8:	f7ff bf86 	b.w	8003bb8 <std>
 8003cac:	200004bc 	.word	0x200004bc
 8003cb0:	20000384 	.word	0x20000384
 8003cb4:	08003c25 	.word	0x08003c25

08003cb8 <__sfp_lock_acquire>:
 8003cb8:	4801      	ldr	r0, [pc, #4]	@ (8003cc0 <__sfp_lock_acquire+0x8>)
 8003cba:	f000 b906 	b.w	8003eca <__retarget_lock_acquire_recursive>
 8003cbe:	bf00      	nop
 8003cc0:	200004c1 	.word	0x200004c1

08003cc4 <__sfp_lock_release>:
 8003cc4:	4801      	ldr	r0, [pc, #4]	@ (8003ccc <__sfp_lock_release+0x8>)
 8003cc6:	f000 b901 	b.w	8003ecc <__retarget_lock_release_recursive>
 8003cca:	bf00      	nop
 8003ccc:	200004c1 	.word	0x200004c1

08003cd0 <__sinit>:
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	f7ff fff0 	bl	8003cb8 <__sfp_lock_acquire>
 8003cd8:	6a23      	ldr	r3, [r4, #32]
 8003cda:	b11b      	cbz	r3, 8003ce4 <__sinit+0x14>
 8003cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce0:	f7ff bff0 	b.w	8003cc4 <__sfp_lock_release>
 8003ce4:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <__sinit+0x28>)
 8003ce6:	6223      	str	r3, [r4, #32]
 8003ce8:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <__sinit+0x2c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f5      	bne.n	8003cdc <__sinit+0xc>
 8003cf0:	f7ff ffc4 	bl	8003c7c <global_stdio_init.part.0>
 8003cf4:	e7f2      	b.n	8003cdc <__sinit+0xc>
 8003cf6:	bf00      	nop
 8003cf8:	08003c3d 	.word	0x08003c3d
 8003cfc:	200004bc 	.word	0x200004bc

08003d00 <_fwalk_sglue>:
 8003d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d04:	4607      	mov	r7, r0
 8003d06:	4688      	mov	r8, r1
 8003d08:	4614      	mov	r4, r2
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d10:	f1b9 0901 	subs.w	r9, r9, #1
 8003d14:	d505      	bpl.n	8003d22 <_fwalk_sglue+0x22>
 8003d16:	6824      	ldr	r4, [r4, #0]
 8003d18:	2c00      	cmp	r4, #0
 8003d1a:	d1f7      	bne.n	8003d0c <_fwalk_sglue+0xc>
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d22:	89ab      	ldrh	r3, [r5, #12]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d907      	bls.n	8003d38 <_fwalk_sglue+0x38>
 8003d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	d003      	beq.n	8003d38 <_fwalk_sglue+0x38>
 8003d30:	4629      	mov	r1, r5
 8003d32:	4638      	mov	r0, r7
 8003d34:	47c0      	blx	r8
 8003d36:	4306      	orrs	r6, r0
 8003d38:	3568      	adds	r5, #104	@ 0x68
 8003d3a:	e7e9      	b.n	8003d10 <_fwalk_sglue+0x10>

08003d3c <iprintf>:
 8003d3c:	b40f      	push	{r0, r1, r2, r3}
 8003d3e:	b507      	push	{r0, r1, r2, lr}
 8003d40:	4906      	ldr	r1, [pc, #24]	@ (8003d5c <iprintf+0x20>)
 8003d42:	ab04      	add	r3, sp, #16
 8003d44:	6808      	ldr	r0, [r1, #0]
 8003d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d4a:	6881      	ldr	r1, [r0, #8]
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	f000 fa99 	bl	8004284 <_vfiprintf_r>
 8003d52:	b003      	add	sp, #12
 8003d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d58:	b004      	add	sp, #16
 8003d5a:	4770      	bx	lr
 8003d5c:	2000016c 	.word	0x2000016c

08003d60 <_puts_r>:
 8003d60:	6a03      	ldr	r3, [r0, #32]
 8003d62:	b570      	push	{r4, r5, r6, lr}
 8003d64:	6884      	ldr	r4, [r0, #8]
 8003d66:	4605      	mov	r5, r0
 8003d68:	460e      	mov	r6, r1
 8003d6a:	b90b      	cbnz	r3, 8003d70 <_puts_r+0x10>
 8003d6c:	f7ff ffb0 	bl	8003cd0 <__sinit>
 8003d70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d72:	07db      	lsls	r3, r3, #31
 8003d74:	d405      	bmi.n	8003d82 <_puts_r+0x22>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	0598      	lsls	r0, r3, #22
 8003d7a:	d402      	bmi.n	8003d82 <_puts_r+0x22>
 8003d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d7e:	f000 f8a4 	bl	8003eca <__retarget_lock_acquire_recursive>
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	0719      	lsls	r1, r3, #28
 8003d86:	d502      	bpl.n	8003d8e <_puts_r+0x2e>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d135      	bne.n	8003dfa <_puts_r+0x9a>
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 fe79 	bl	8004a88 <__swsetup_r>
 8003d96:	b380      	cbz	r0, 8003dfa <_puts_r+0x9a>
 8003d98:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003d9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d9e:	07da      	lsls	r2, r3, #31
 8003da0:	d405      	bmi.n	8003dae <_puts_r+0x4e>
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	059b      	lsls	r3, r3, #22
 8003da6:	d402      	bmi.n	8003dae <_puts_r+0x4e>
 8003da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003daa:	f000 f88f 	bl	8003ecc <__retarget_lock_release_recursive>
 8003dae:	4628      	mov	r0, r5
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da04      	bge.n	8003dc0 <_puts_r+0x60>
 8003db6:	69a2      	ldr	r2, [r4, #24]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	dc17      	bgt.n	8003dec <_puts_r+0x8c>
 8003dbc:	290a      	cmp	r1, #10
 8003dbe:	d015      	beq.n	8003dec <_puts_r+0x8c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	6022      	str	r2, [r4, #0]
 8003dc6:	7019      	strb	r1, [r3, #0]
 8003dc8:	68a3      	ldr	r3, [r4, #8]
 8003dca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	60a3      	str	r3, [r4, #8]
 8003dd2:	2900      	cmp	r1, #0
 8003dd4:	d1ed      	bne.n	8003db2 <_puts_r+0x52>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da11      	bge.n	8003dfe <_puts_r+0x9e>
 8003dda:	4622      	mov	r2, r4
 8003ddc:	210a      	movs	r1, #10
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 fe13 	bl	8004a0a <__swbuf_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	d0d7      	beq.n	8003d98 <_puts_r+0x38>
 8003de8:	250a      	movs	r5, #10
 8003dea:	e7d7      	b.n	8003d9c <_puts_r+0x3c>
 8003dec:	4622      	mov	r2, r4
 8003dee:	4628      	mov	r0, r5
 8003df0:	f000 fe0b 	bl	8004a0a <__swbuf_r>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d1e7      	bne.n	8003dc8 <_puts_r+0x68>
 8003df8:	e7ce      	b.n	8003d98 <_puts_r+0x38>
 8003dfa:	3e01      	subs	r6, #1
 8003dfc:	e7e4      	b.n	8003dc8 <_puts_r+0x68>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	6022      	str	r2, [r4, #0]
 8003e04:	220a      	movs	r2, #10
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e7ee      	b.n	8003de8 <_puts_r+0x88>
	...

08003e0c <puts>:
 8003e0c:	4b02      	ldr	r3, [pc, #8]	@ (8003e18 <puts+0xc>)
 8003e0e:	4601      	mov	r1, r0
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	f7ff bfa5 	b.w	8003d60 <_puts_r>
 8003e16:	bf00      	nop
 8003e18:	2000016c 	.word	0x2000016c

08003e1c <strncpy>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	3901      	subs	r1, #1
 8003e20:	4603      	mov	r3, r0
 8003e22:	b132      	cbz	r2, 8003e32 <strncpy+0x16>
 8003e24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e28:	f803 4b01 	strb.w	r4, [r3], #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	2c00      	cmp	r4, #0
 8003e30:	d1f7      	bne.n	8003e22 <strncpy+0x6>
 8003e32:	441a      	add	r2, r3
 8003e34:	2100      	movs	r1, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d100      	bne.n	8003e3c <strncpy+0x20>
 8003e3a:	bd10      	pop	{r4, pc}
 8003e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e40:	e7f9      	b.n	8003e36 <strncpy+0x1a>

08003e42 <memset>:
 8003e42:	4402      	add	r2, r0
 8003e44:	4603      	mov	r3, r0
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d100      	bne.n	8003e4c <memset+0xa>
 8003e4a:	4770      	bx	lr
 8003e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e50:	e7f9      	b.n	8003e46 <memset+0x4>
	...

08003e54 <_sbrk_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4d06      	ldr	r5, [pc, #24]	@ (8003e70 <_sbrk_r+0x1c>)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fd fc74 	bl	800174c <_sbrk>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_sbrk_r+0x1a>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_sbrk_r+0x1a>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	200004c4 	.word	0x200004c4

08003e74 <__errno>:
 8003e74:	4b01      	ldr	r3, [pc, #4]	@ (8003e7c <__errno+0x8>)
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	2000016c 	.word	0x2000016c

08003e80 <__libc_init_array>:
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	4d0d      	ldr	r5, [pc, #52]	@ (8003eb8 <__libc_init_array+0x38>)
 8003e84:	4c0d      	ldr	r4, [pc, #52]	@ (8003ebc <__libc_init_array+0x3c>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	2600      	movs	r6, #0
 8003e8c:	42a6      	cmp	r6, r4
 8003e8e:	d109      	bne.n	8003ea4 <__libc_init_array+0x24>
 8003e90:	4d0b      	ldr	r5, [pc, #44]	@ (8003ec0 <__libc_init_array+0x40>)
 8003e92:	4c0c      	ldr	r4, [pc, #48]	@ (8003ec4 <__libc_init_array+0x44>)
 8003e94:	f000 ff3a 	bl	8004d0c <_init>
 8003e98:	1b64      	subs	r4, r4, r5
 8003e9a:	10a4      	asrs	r4, r4, #2
 8003e9c:	2600      	movs	r6, #0
 8003e9e:	42a6      	cmp	r6, r4
 8003ea0:	d105      	bne.n	8003eae <__libc_init_array+0x2e>
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea8:	4798      	blx	r3
 8003eaa:	3601      	adds	r6, #1
 8003eac:	e7ee      	b.n	8003e8c <__libc_init_array+0xc>
 8003eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb2:	4798      	blx	r3
 8003eb4:	3601      	adds	r6, #1
 8003eb6:	e7f2      	b.n	8003e9e <__libc_init_array+0x1e>
 8003eb8:	08004f64 	.word	0x08004f64
 8003ebc:	08004f64 	.word	0x08004f64
 8003ec0:	08004f64 	.word	0x08004f64
 8003ec4:	08004f68 	.word	0x08004f68

08003ec8 <__retarget_lock_init_recursive>:
 8003ec8:	4770      	bx	lr

08003eca <__retarget_lock_acquire_recursive>:
 8003eca:	4770      	bx	lr

08003ecc <__retarget_lock_release_recursive>:
 8003ecc:	4770      	bx	lr

08003ece <memcpy>:
 8003ece:	440a      	add	r2, r1
 8003ed0:	4291      	cmp	r1, r2
 8003ed2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003ed6:	d100      	bne.n	8003eda <memcpy+0xc>
 8003ed8:	4770      	bx	lr
 8003eda:	b510      	push	{r4, lr}
 8003edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee4:	4291      	cmp	r1, r2
 8003ee6:	d1f9      	bne.n	8003edc <memcpy+0xe>
 8003ee8:	bd10      	pop	{r4, pc}
	...

08003eec <_free_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4605      	mov	r5, r0
 8003ef0:	2900      	cmp	r1, #0
 8003ef2:	d041      	beq.n	8003f78 <_free_r+0x8c>
 8003ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ef8:	1f0c      	subs	r4, r1, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bfb8      	it	lt
 8003efe:	18e4      	addlt	r4, r4, r3
 8003f00:	f7ff fe2e 	bl	8003b60 <__malloc_lock>
 8003f04:	4a1d      	ldr	r2, [pc, #116]	@ (8003f7c <_free_r+0x90>)
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	b933      	cbnz	r3, 8003f18 <_free_r+0x2c>
 8003f0a:	6063      	str	r3, [r4, #4]
 8003f0c:	6014      	str	r4, [r2, #0]
 8003f0e:	4628      	mov	r0, r5
 8003f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f14:	f7ff be2a 	b.w	8003b6c <__malloc_unlock>
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	d908      	bls.n	8003f2e <_free_r+0x42>
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	1821      	adds	r1, r4, r0
 8003f20:	428b      	cmp	r3, r1
 8003f22:	bf01      	itttt	eq
 8003f24:	6819      	ldreq	r1, [r3, #0]
 8003f26:	685b      	ldreq	r3, [r3, #4]
 8003f28:	1809      	addeq	r1, r1, r0
 8003f2a:	6021      	streq	r1, [r4, #0]
 8003f2c:	e7ed      	b.n	8003f0a <_free_r+0x1e>
 8003f2e:	461a      	mov	r2, r3
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	b10b      	cbz	r3, 8003f38 <_free_r+0x4c>
 8003f34:	42a3      	cmp	r3, r4
 8003f36:	d9fa      	bls.n	8003f2e <_free_r+0x42>
 8003f38:	6811      	ldr	r1, [r2, #0]
 8003f3a:	1850      	adds	r0, r2, r1
 8003f3c:	42a0      	cmp	r0, r4
 8003f3e:	d10b      	bne.n	8003f58 <_free_r+0x6c>
 8003f40:	6820      	ldr	r0, [r4, #0]
 8003f42:	4401      	add	r1, r0
 8003f44:	1850      	adds	r0, r2, r1
 8003f46:	4283      	cmp	r3, r0
 8003f48:	6011      	str	r1, [r2, #0]
 8003f4a:	d1e0      	bne.n	8003f0e <_free_r+0x22>
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	6053      	str	r3, [r2, #4]
 8003f52:	4408      	add	r0, r1
 8003f54:	6010      	str	r0, [r2, #0]
 8003f56:	e7da      	b.n	8003f0e <_free_r+0x22>
 8003f58:	d902      	bls.n	8003f60 <_free_r+0x74>
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	e7d6      	b.n	8003f0e <_free_r+0x22>
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	1821      	adds	r1, r4, r0
 8003f64:	428b      	cmp	r3, r1
 8003f66:	bf04      	itt	eq
 8003f68:	6819      	ldreq	r1, [r3, #0]
 8003f6a:	685b      	ldreq	r3, [r3, #4]
 8003f6c:	6063      	str	r3, [r4, #4]
 8003f6e:	bf04      	itt	eq
 8003f70:	1809      	addeq	r1, r1, r0
 8003f72:	6021      	streq	r1, [r4, #0]
 8003f74:	6054      	str	r4, [r2, #4]
 8003f76:	e7ca      	b.n	8003f0e <_free_r+0x22>
 8003f78:	bd38      	pop	{r3, r4, r5, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000380 	.word	0x20000380

08003f80 <__ssputs_r>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	688e      	ldr	r6, [r1, #8]
 8003f86:	461f      	mov	r7, r3
 8003f88:	42be      	cmp	r6, r7
 8003f8a:	680b      	ldr	r3, [r1, #0]
 8003f8c:	4682      	mov	sl, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	4690      	mov	r8, r2
 8003f92:	d82d      	bhi.n	8003ff0 <__ssputs_r+0x70>
 8003f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f9c:	d026      	beq.n	8003fec <__ssputs_r+0x6c>
 8003f9e:	6965      	ldr	r5, [r4, #20]
 8003fa0:	6909      	ldr	r1, [r1, #16]
 8003fa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fa6:	eba3 0901 	sub.w	r9, r3, r1
 8003faa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fae:	1c7b      	adds	r3, r7, #1
 8003fb0:	444b      	add	r3, r9
 8003fb2:	106d      	asrs	r5, r5, #1
 8003fb4:	429d      	cmp	r5, r3
 8003fb6:	bf38      	it	cc
 8003fb8:	461d      	movcc	r5, r3
 8003fba:	0553      	lsls	r3, r2, #21
 8003fbc:	d527      	bpl.n	800400e <__ssputs_r+0x8e>
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f7ff fd4e 	bl	8003a60 <_malloc_r>
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	b360      	cbz	r0, 8004022 <__ssputs_r+0xa2>
 8003fc8:	6921      	ldr	r1, [r4, #16]
 8003fca:	464a      	mov	r2, r9
 8003fcc:	f7ff ff7f 	bl	8003ece <memcpy>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	6126      	str	r6, [r4, #16]
 8003fde:	6165      	str	r5, [r4, #20]
 8003fe0:	444e      	add	r6, r9
 8003fe2:	eba5 0509 	sub.w	r5, r5, r9
 8003fe6:	6026      	str	r6, [r4, #0]
 8003fe8:	60a5      	str	r5, [r4, #8]
 8003fea:	463e      	mov	r6, r7
 8003fec:	42be      	cmp	r6, r7
 8003fee:	d900      	bls.n	8003ff2 <__ssputs_r+0x72>
 8003ff0:	463e      	mov	r6, r7
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	4632      	mov	r2, r6
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	f000 fdfe 	bl	8004bf8 <memmove>
 8003ffc:	68a3      	ldr	r3, [r4, #8]
 8003ffe:	1b9b      	subs	r3, r3, r6
 8004000:	60a3      	str	r3, [r4, #8]
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	4433      	add	r3, r6
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	2000      	movs	r0, #0
 800400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400e:	462a      	mov	r2, r5
 8004010:	f000 fccd 	bl	80049ae <_realloc_r>
 8004014:	4606      	mov	r6, r0
 8004016:	2800      	cmp	r0, #0
 8004018:	d1e0      	bne.n	8003fdc <__ssputs_r+0x5c>
 800401a:	6921      	ldr	r1, [r4, #16]
 800401c:	4650      	mov	r0, sl
 800401e:	f7ff ff65 	bl	8003eec <_free_r>
 8004022:	230c      	movs	r3, #12
 8004024:	f8ca 3000 	str.w	r3, [sl]
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402e:	81a3      	strh	r3, [r4, #12]
 8004030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004034:	e7e9      	b.n	800400a <__ssputs_r+0x8a>
	...

08004038 <_svfiprintf_r>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	4698      	mov	r8, r3
 800403e:	898b      	ldrh	r3, [r1, #12]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	b09d      	sub	sp, #116	@ 0x74
 8004044:	4607      	mov	r7, r0
 8004046:	460d      	mov	r5, r1
 8004048:	4614      	mov	r4, r2
 800404a:	d510      	bpl.n	800406e <_svfiprintf_r+0x36>
 800404c:	690b      	ldr	r3, [r1, #16]
 800404e:	b973      	cbnz	r3, 800406e <_svfiprintf_r+0x36>
 8004050:	2140      	movs	r1, #64	@ 0x40
 8004052:	f7ff fd05 	bl	8003a60 <_malloc_r>
 8004056:	6028      	str	r0, [r5, #0]
 8004058:	6128      	str	r0, [r5, #16]
 800405a:	b930      	cbnz	r0, 800406a <_svfiprintf_r+0x32>
 800405c:	230c      	movs	r3, #12
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004064:	b01d      	add	sp, #116	@ 0x74
 8004066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800406a:	2340      	movs	r3, #64	@ 0x40
 800406c:	616b      	str	r3, [r5, #20]
 800406e:	2300      	movs	r3, #0
 8004070:	9309      	str	r3, [sp, #36]	@ 0x24
 8004072:	2320      	movs	r3, #32
 8004074:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004078:	f8cd 800c 	str.w	r8, [sp, #12]
 800407c:	2330      	movs	r3, #48	@ 0x30
 800407e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800421c <_svfiprintf_r+0x1e4>
 8004082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004086:	f04f 0901 	mov.w	r9, #1
 800408a:	4623      	mov	r3, r4
 800408c:	469a      	mov	sl, r3
 800408e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004092:	b10a      	cbz	r2, 8004098 <_svfiprintf_r+0x60>
 8004094:	2a25      	cmp	r2, #37	@ 0x25
 8004096:	d1f9      	bne.n	800408c <_svfiprintf_r+0x54>
 8004098:	ebba 0b04 	subs.w	fp, sl, r4
 800409c:	d00b      	beq.n	80040b6 <_svfiprintf_r+0x7e>
 800409e:	465b      	mov	r3, fp
 80040a0:	4622      	mov	r2, r4
 80040a2:	4629      	mov	r1, r5
 80040a4:	4638      	mov	r0, r7
 80040a6:	f7ff ff6b 	bl	8003f80 <__ssputs_r>
 80040aa:	3001      	adds	r0, #1
 80040ac:	f000 80a7 	beq.w	80041fe <_svfiprintf_r+0x1c6>
 80040b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040b2:	445a      	add	r2, fp
 80040b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80040b6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 809f 	beq.w	80041fe <_svfiprintf_r+0x1c6>
 80040c0:	2300      	movs	r3, #0
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ca:	f10a 0a01 	add.w	sl, sl, #1
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	9307      	str	r3, [sp, #28]
 80040d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80040d8:	4654      	mov	r4, sl
 80040da:	2205      	movs	r2, #5
 80040dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e0:	484e      	ldr	r0, [pc, #312]	@ (800421c <_svfiprintf_r+0x1e4>)
 80040e2:	f7fc f87d 	bl	80001e0 <memchr>
 80040e6:	9a04      	ldr	r2, [sp, #16]
 80040e8:	b9d8      	cbnz	r0, 8004122 <_svfiprintf_r+0xea>
 80040ea:	06d0      	lsls	r0, r2, #27
 80040ec:	bf44      	itt	mi
 80040ee:	2320      	movmi	r3, #32
 80040f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040f4:	0711      	lsls	r1, r2, #28
 80040f6:	bf44      	itt	mi
 80040f8:	232b      	movmi	r3, #43	@ 0x2b
 80040fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004102:	2b2a      	cmp	r3, #42	@ 0x2a
 8004104:	d015      	beq.n	8004132 <_svfiprintf_r+0xfa>
 8004106:	9a07      	ldr	r2, [sp, #28]
 8004108:	4654      	mov	r4, sl
 800410a:	2000      	movs	r0, #0
 800410c:	f04f 0c0a 	mov.w	ip, #10
 8004110:	4621      	mov	r1, r4
 8004112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004116:	3b30      	subs	r3, #48	@ 0x30
 8004118:	2b09      	cmp	r3, #9
 800411a:	d94b      	bls.n	80041b4 <_svfiprintf_r+0x17c>
 800411c:	b1b0      	cbz	r0, 800414c <_svfiprintf_r+0x114>
 800411e:	9207      	str	r2, [sp, #28]
 8004120:	e014      	b.n	800414c <_svfiprintf_r+0x114>
 8004122:	eba0 0308 	sub.w	r3, r0, r8
 8004126:	fa09 f303 	lsl.w	r3, r9, r3
 800412a:	4313      	orrs	r3, r2
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	46a2      	mov	sl, r4
 8004130:	e7d2      	b.n	80040d8 <_svfiprintf_r+0xa0>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	1d19      	adds	r1, r3, #4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	9103      	str	r1, [sp, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	bfbb      	ittet	lt
 800413e:	425b      	neglt	r3, r3
 8004140:	f042 0202 	orrlt.w	r2, r2, #2
 8004144:	9307      	strge	r3, [sp, #28]
 8004146:	9307      	strlt	r3, [sp, #28]
 8004148:	bfb8      	it	lt
 800414a:	9204      	strlt	r2, [sp, #16]
 800414c:	7823      	ldrb	r3, [r4, #0]
 800414e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004150:	d10a      	bne.n	8004168 <_svfiprintf_r+0x130>
 8004152:	7863      	ldrb	r3, [r4, #1]
 8004154:	2b2a      	cmp	r3, #42	@ 0x2a
 8004156:	d132      	bne.n	80041be <_svfiprintf_r+0x186>
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	9203      	str	r2, [sp, #12]
 8004160:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004164:	3402      	adds	r4, #2
 8004166:	9305      	str	r3, [sp, #20]
 8004168:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800422c <_svfiprintf_r+0x1f4>
 800416c:	7821      	ldrb	r1, [r4, #0]
 800416e:	2203      	movs	r2, #3
 8004170:	4650      	mov	r0, sl
 8004172:	f7fc f835 	bl	80001e0 <memchr>
 8004176:	b138      	cbz	r0, 8004188 <_svfiprintf_r+0x150>
 8004178:	9b04      	ldr	r3, [sp, #16]
 800417a:	eba0 000a 	sub.w	r0, r0, sl
 800417e:	2240      	movs	r2, #64	@ 0x40
 8004180:	4082      	lsls	r2, r0
 8004182:	4313      	orrs	r3, r2
 8004184:	3401      	adds	r4, #1
 8004186:	9304      	str	r3, [sp, #16]
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	4824      	ldr	r0, [pc, #144]	@ (8004220 <_svfiprintf_r+0x1e8>)
 800418e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004192:	2206      	movs	r2, #6
 8004194:	f7fc f824 	bl	80001e0 <memchr>
 8004198:	2800      	cmp	r0, #0
 800419a:	d036      	beq.n	800420a <_svfiprintf_r+0x1d2>
 800419c:	4b21      	ldr	r3, [pc, #132]	@ (8004224 <_svfiprintf_r+0x1ec>)
 800419e:	bb1b      	cbnz	r3, 80041e8 <_svfiprintf_r+0x1b0>
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	3307      	adds	r3, #7
 80041a4:	f023 0307 	bic.w	r3, r3, #7
 80041a8:	3308      	adds	r3, #8
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ae:	4433      	add	r3, r6
 80041b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80041b2:	e76a      	b.n	800408a <_svfiprintf_r+0x52>
 80041b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80041b8:	460c      	mov	r4, r1
 80041ba:	2001      	movs	r0, #1
 80041bc:	e7a8      	b.n	8004110 <_svfiprintf_r+0xd8>
 80041be:	2300      	movs	r3, #0
 80041c0:	3401      	adds	r4, #1
 80041c2:	9305      	str	r3, [sp, #20]
 80041c4:	4619      	mov	r1, r3
 80041c6:	f04f 0c0a 	mov.w	ip, #10
 80041ca:	4620      	mov	r0, r4
 80041cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041d0:	3a30      	subs	r2, #48	@ 0x30
 80041d2:	2a09      	cmp	r2, #9
 80041d4:	d903      	bls.n	80041de <_svfiprintf_r+0x1a6>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0c6      	beq.n	8004168 <_svfiprintf_r+0x130>
 80041da:	9105      	str	r1, [sp, #20]
 80041dc:	e7c4      	b.n	8004168 <_svfiprintf_r+0x130>
 80041de:	fb0c 2101 	mla	r1, ip, r1, r2
 80041e2:	4604      	mov	r4, r0
 80041e4:	2301      	movs	r3, #1
 80041e6:	e7f0      	b.n	80041ca <_svfiprintf_r+0x192>
 80041e8:	ab03      	add	r3, sp, #12
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	462a      	mov	r2, r5
 80041ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <_svfiprintf_r+0x1f0>)
 80041f0:	a904      	add	r1, sp, #16
 80041f2:	4638      	mov	r0, r7
 80041f4:	f3af 8000 	nop.w
 80041f8:	1c42      	adds	r2, r0, #1
 80041fa:	4606      	mov	r6, r0
 80041fc:	d1d6      	bne.n	80041ac <_svfiprintf_r+0x174>
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	065b      	lsls	r3, r3, #25
 8004202:	f53f af2d 	bmi.w	8004060 <_svfiprintf_r+0x28>
 8004206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004208:	e72c      	b.n	8004064 <_svfiprintf_r+0x2c>
 800420a:	ab03      	add	r3, sp, #12
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	462a      	mov	r2, r5
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <_svfiprintf_r+0x1f0>)
 8004212:	a904      	add	r1, sp, #16
 8004214:	4638      	mov	r0, r7
 8004216:	f000 f9bb 	bl	8004590 <_printf_i>
 800421a:	e7ed      	b.n	80041f8 <_svfiprintf_r+0x1c0>
 800421c:	08004f28 	.word	0x08004f28
 8004220:	08004f32 	.word	0x08004f32
 8004224:	00000000 	.word	0x00000000
 8004228:	08003f81 	.word	0x08003f81
 800422c:	08004f2e 	.word	0x08004f2e

08004230 <__sfputc_r>:
 8004230:	6893      	ldr	r3, [r2, #8]
 8004232:	3b01      	subs	r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	b410      	push	{r4}
 8004238:	6093      	str	r3, [r2, #8]
 800423a:	da08      	bge.n	800424e <__sfputc_r+0x1e>
 800423c:	6994      	ldr	r4, [r2, #24]
 800423e:	42a3      	cmp	r3, r4
 8004240:	db01      	blt.n	8004246 <__sfputc_r+0x16>
 8004242:	290a      	cmp	r1, #10
 8004244:	d103      	bne.n	800424e <__sfputc_r+0x1e>
 8004246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800424a:	f000 bbde 	b.w	8004a0a <__swbuf_r>
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	1c58      	adds	r0, r3, #1
 8004252:	6010      	str	r0, [r2, #0]
 8004254:	7019      	strb	r1, [r3, #0]
 8004256:	4608      	mov	r0, r1
 8004258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800425c:	4770      	bx	lr

0800425e <__sfputs_r>:
 800425e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004260:	4606      	mov	r6, r0
 8004262:	460f      	mov	r7, r1
 8004264:	4614      	mov	r4, r2
 8004266:	18d5      	adds	r5, r2, r3
 8004268:	42ac      	cmp	r4, r5
 800426a:	d101      	bne.n	8004270 <__sfputs_r+0x12>
 800426c:	2000      	movs	r0, #0
 800426e:	e007      	b.n	8004280 <__sfputs_r+0x22>
 8004270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004274:	463a      	mov	r2, r7
 8004276:	4630      	mov	r0, r6
 8004278:	f7ff ffda 	bl	8004230 <__sfputc_r>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d1f3      	bne.n	8004268 <__sfputs_r+0xa>
 8004280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004284 <_vfiprintf_r>:
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	460d      	mov	r5, r1
 800428a:	b09d      	sub	sp, #116	@ 0x74
 800428c:	4614      	mov	r4, r2
 800428e:	4698      	mov	r8, r3
 8004290:	4606      	mov	r6, r0
 8004292:	b118      	cbz	r0, 800429c <_vfiprintf_r+0x18>
 8004294:	6a03      	ldr	r3, [r0, #32]
 8004296:	b90b      	cbnz	r3, 800429c <_vfiprintf_r+0x18>
 8004298:	f7ff fd1a 	bl	8003cd0 <__sinit>
 800429c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800429e:	07d9      	lsls	r1, r3, #31
 80042a0:	d405      	bmi.n	80042ae <_vfiprintf_r+0x2a>
 80042a2:	89ab      	ldrh	r3, [r5, #12]
 80042a4:	059a      	lsls	r2, r3, #22
 80042a6:	d402      	bmi.n	80042ae <_vfiprintf_r+0x2a>
 80042a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042aa:	f7ff fe0e 	bl	8003eca <__retarget_lock_acquire_recursive>
 80042ae:	89ab      	ldrh	r3, [r5, #12]
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	d501      	bpl.n	80042b8 <_vfiprintf_r+0x34>
 80042b4:	692b      	ldr	r3, [r5, #16]
 80042b6:	b99b      	cbnz	r3, 80042e0 <_vfiprintf_r+0x5c>
 80042b8:	4629      	mov	r1, r5
 80042ba:	4630      	mov	r0, r6
 80042bc:	f000 fbe4 	bl	8004a88 <__swsetup_r>
 80042c0:	b170      	cbz	r0, 80042e0 <_vfiprintf_r+0x5c>
 80042c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042c4:	07dc      	lsls	r4, r3, #31
 80042c6:	d504      	bpl.n	80042d2 <_vfiprintf_r+0x4e>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042cc:	b01d      	add	sp, #116	@ 0x74
 80042ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d2:	89ab      	ldrh	r3, [r5, #12]
 80042d4:	0598      	lsls	r0, r3, #22
 80042d6:	d4f7      	bmi.n	80042c8 <_vfiprintf_r+0x44>
 80042d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042da:	f7ff fdf7 	bl	8003ecc <__retarget_lock_release_recursive>
 80042de:	e7f3      	b.n	80042c8 <_vfiprintf_r+0x44>
 80042e0:	2300      	movs	r3, #0
 80042e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e4:	2320      	movs	r3, #32
 80042e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ee:	2330      	movs	r3, #48	@ 0x30
 80042f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044a0 <_vfiprintf_r+0x21c>
 80042f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042f8:	f04f 0901 	mov.w	r9, #1
 80042fc:	4623      	mov	r3, r4
 80042fe:	469a      	mov	sl, r3
 8004300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004304:	b10a      	cbz	r2, 800430a <_vfiprintf_r+0x86>
 8004306:	2a25      	cmp	r2, #37	@ 0x25
 8004308:	d1f9      	bne.n	80042fe <_vfiprintf_r+0x7a>
 800430a:	ebba 0b04 	subs.w	fp, sl, r4
 800430e:	d00b      	beq.n	8004328 <_vfiprintf_r+0xa4>
 8004310:	465b      	mov	r3, fp
 8004312:	4622      	mov	r2, r4
 8004314:	4629      	mov	r1, r5
 8004316:	4630      	mov	r0, r6
 8004318:	f7ff ffa1 	bl	800425e <__sfputs_r>
 800431c:	3001      	adds	r0, #1
 800431e:	f000 80a7 	beq.w	8004470 <_vfiprintf_r+0x1ec>
 8004322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004324:	445a      	add	r2, fp
 8004326:	9209      	str	r2, [sp, #36]	@ 0x24
 8004328:	f89a 3000 	ldrb.w	r3, [sl]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 809f 	beq.w	8004470 <_vfiprintf_r+0x1ec>
 8004332:	2300      	movs	r3, #0
 8004334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800433c:	f10a 0a01 	add.w	sl, sl, #1
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	9307      	str	r3, [sp, #28]
 8004344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004348:	931a      	str	r3, [sp, #104]	@ 0x68
 800434a:	4654      	mov	r4, sl
 800434c:	2205      	movs	r2, #5
 800434e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004352:	4853      	ldr	r0, [pc, #332]	@ (80044a0 <_vfiprintf_r+0x21c>)
 8004354:	f7fb ff44 	bl	80001e0 <memchr>
 8004358:	9a04      	ldr	r2, [sp, #16]
 800435a:	b9d8      	cbnz	r0, 8004394 <_vfiprintf_r+0x110>
 800435c:	06d1      	lsls	r1, r2, #27
 800435e:	bf44      	itt	mi
 8004360:	2320      	movmi	r3, #32
 8004362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004366:	0713      	lsls	r3, r2, #28
 8004368:	bf44      	itt	mi
 800436a:	232b      	movmi	r3, #43	@ 0x2b
 800436c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004370:	f89a 3000 	ldrb.w	r3, [sl]
 8004374:	2b2a      	cmp	r3, #42	@ 0x2a
 8004376:	d015      	beq.n	80043a4 <_vfiprintf_r+0x120>
 8004378:	9a07      	ldr	r2, [sp, #28]
 800437a:	4654      	mov	r4, sl
 800437c:	2000      	movs	r0, #0
 800437e:	f04f 0c0a 	mov.w	ip, #10
 8004382:	4621      	mov	r1, r4
 8004384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004388:	3b30      	subs	r3, #48	@ 0x30
 800438a:	2b09      	cmp	r3, #9
 800438c:	d94b      	bls.n	8004426 <_vfiprintf_r+0x1a2>
 800438e:	b1b0      	cbz	r0, 80043be <_vfiprintf_r+0x13a>
 8004390:	9207      	str	r2, [sp, #28]
 8004392:	e014      	b.n	80043be <_vfiprintf_r+0x13a>
 8004394:	eba0 0308 	sub.w	r3, r0, r8
 8004398:	fa09 f303 	lsl.w	r3, r9, r3
 800439c:	4313      	orrs	r3, r2
 800439e:	9304      	str	r3, [sp, #16]
 80043a0:	46a2      	mov	sl, r4
 80043a2:	e7d2      	b.n	800434a <_vfiprintf_r+0xc6>
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	1d19      	adds	r1, r3, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	9103      	str	r1, [sp, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bfbb      	ittet	lt
 80043b0:	425b      	neglt	r3, r3
 80043b2:	f042 0202 	orrlt.w	r2, r2, #2
 80043b6:	9307      	strge	r3, [sp, #28]
 80043b8:	9307      	strlt	r3, [sp, #28]
 80043ba:	bfb8      	it	lt
 80043bc:	9204      	strlt	r2, [sp, #16]
 80043be:	7823      	ldrb	r3, [r4, #0]
 80043c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80043c2:	d10a      	bne.n	80043da <_vfiprintf_r+0x156>
 80043c4:	7863      	ldrb	r3, [r4, #1]
 80043c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043c8:	d132      	bne.n	8004430 <_vfiprintf_r+0x1ac>
 80043ca:	9b03      	ldr	r3, [sp, #12]
 80043cc:	1d1a      	adds	r2, r3, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	9203      	str	r2, [sp, #12]
 80043d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043d6:	3402      	adds	r4, #2
 80043d8:	9305      	str	r3, [sp, #20]
 80043da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80044b0 <_vfiprintf_r+0x22c>
 80043de:	7821      	ldrb	r1, [r4, #0]
 80043e0:	2203      	movs	r2, #3
 80043e2:	4650      	mov	r0, sl
 80043e4:	f7fb fefc 	bl	80001e0 <memchr>
 80043e8:	b138      	cbz	r0, 80043fa <_vfiprintf_r+0x176>
 80043ea:	9b04      	ldr	r3, [sp, #16]
 80043ec:	eba0 000a 	sub.w	r0, r0, sl
 80043f0:	2240      	movs	r2, #64	@ 0x40
 80043f2:	4082      	lsls	r2, r0
 80043f4:	4313      	orrs	r3, r2
 80043f6:	3401      	adds	r4, #1
 80043f8:	9304      	str	r3, [sp, #16]
 80043fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fe:	4829      	ldr	r0, [pc, #164]	@ (80044a4 <_vfiprintf_r+0x220>)
 8004400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004404:	2206      	movs	r2, #6
 8004406:	f7fb feeb 	bl	80001e0 <memchr>
 800440a:	2800      	cmp	r0, #0
 800440c:	d03f      	beq.n	800448e <_vfiprintf_r+0x20a>
 800440e:	4b26      	ldr	r3, [pc, #152]	@ (80044a8 <_vfiprintf_r+0x224>)
 8004410:	bb1b      	cbnz	r3, 800445a <_vfiprintf_r+0x1d6>
 8004412:	9b03      	ldr	r3, [sp, #12]
 8004414:	3307      	adds	r3, #7
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	3308      	adds	r3, #8
 800441c:	9303      	str	r3, [sp, #12]
 800441e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004420:	443b      	add	r3, r7
 8004422:	9309      	str	r3, [sp, #36]	@ 0x24
 8004424:	e76a      	b.n	80042fc <_vfiprintf_r+0x78>
 8004426:	fb0c 3202 	mla	r2, ip, r2, r3
 800442a:	460c      	mov	r4, r1
 800442c:	2001      	movs	r0, #1
 800442e:	e7a8      	b.n	8004382 <_vfiprintf_r+0xfe>
 8004430:	2300      	movs	r3, #0
 8004432:	3401      	adds	r4, #1
 8004434:	9305      	str	r3, [sp, #20]
 8004436:	4619      	mov	r1, r3
 8004438:	f04f 0c0a 	mov.w	ip, #10
 800443c:	4620      	mov	r0, r4
 800443e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004442:	3a30      	subs	r2, #48	@ 0x30
 8004444:	2a09      	cmp	r2, #9
 8004446:	d903      	bls.n	8004450 <_vfiprintf_r+0x1cc>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0c6      	beq.n	80043da <_vfiprintf_r+0x156>
 800444c:	9105      	str	r1, [sp, #20]
 800444e:	e7c4      	b.n	80043da <_vfiprintf_r+0x156>
 8004450:	fb0c 2101 	mla	r1, ip, r1, r2
 8004454:	4604      	mov	r4, r0
 8004456:	2301      	movs	r3, #1
 8004458:	e7f0      	b.n	800443c <_vfiprintf_r+0x1b8>
 800445a:	ab03      	add	r3, sp, #12
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	462a      	mov	r2, r5
 8004460:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <_vfiprintf_r+0x228>)
 8004462:	a904      	add	r1, sp, #16
 8004464:	4630      	mov	r0, r6
 8004466:	f3af 8000 	nop.w
 800446a:	4607      	mov	r7, r0
 800446c:	1c78      	adds	r0, r7, #1
 800446e:	d1d6      	bne.n	800441e <_vfiprintf_r+0x19a>
 8004470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004472:	07d9      	lsls	r1, r3, #31
 8004474:	d405      	bmi.n	8004482 <_vfiprintf_r+0x1fe>
 8004476:	89ab      	ldrh	r3, [r5, #12]
 8004478:	059a      	lsls	r2, r3, #22
 800447a:	d402      	bmi.n	8004482 <_vfiprintf_r+0x1fe>
 800447c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800447e:	f7ff fd25 	bl	8003ecc <__retarget_lock_release_recursive>
 8004482:	89ab      	ldrh	r3, [r5, #12]
 8004484:	065b      	lsls	r3, r3, #25
 8004486:	f53f af1f 	bmi.w	80042c8 <_vfiprintf_r+0x44>
 800448a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800448c:	e71e      	b.n	80042cc <_vfiprintf_r+0x48>
 800448e:	ab03      	add	r3, sp, #12
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	462a      	mov	r2, r5
 8004494:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <_vfiprintf_r+0x228>)
 8004496:	a904      	add	r1, sp, #16
 8004498:	4630      	mov	r0, r6
 800449a:	f000 f879 	bl	8004590 <_printf_i>
 800449e:	e7e4      	b.n	800446a <_vfiprintf_r+0x1e6>
 80044a0:	08004f28 	.word	0x08004f28
 80044a4:	08004f32 	.word	0x08004f32
 80044a8:	00000000 	.word	0x00000000
 80044ac:	0800425f 	.word	0x0800425f
 80044b0:	08004f2e 	.word	0x08004f2e

080044b4 <_printf_common>:
 80044b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	4616      	mov	r6, r2
 80044ba:	4698      	mov	r8, r3
 80044bc:	688a      	ldr	r2, [r1, #8]
 80044be:	690b      	ldr	r3, [r1, #16]
 80044c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044c4:	4293      	cmp	r3, r2
 80044c6:	bfb8      	it	lt
 80044c8:	4613      	movlt	r3, r2
 80044ca:	6033      	str	r3, [r6, #0]
 80044cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044d0:	4607      	mov	r7, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	b10a      	cbz	r2, 80044da <_printf_common+0x26>
 80044d6:	3301      	adds	r3, #1
 80044d8:	6033      	str	r3, [r6, #0]
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	0699      	lsls	r1, r3, #26
 80044de:	bf42      	ittt	mi
 80044e0:	6833      	ldrmi	r3, [r6, #0]
 80044e2:	3302      	addmi	r3, #2
 80044e4:	6033      	strmi	r3, [r6, #0]
 80044e6:	6825      	ldr	r5, [r4, #0]
 80044e8:	f015 0506 	ands.w	r5, r5, #6
 80044ec:	d106      	bne.n	80044fc <_printf_common+0x48>
 80044ee:	f104 0a19 	add.w	sl, r4, #25
 80044f2:	68e3      	ldr	r3, [r4, #12]
 80044f4:	6832      	ldr	r2, [r6, #0]
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	42ab      	cmp	r3, r5
 80044fa:	dc26      	bgt.n	800454a <_printf_common+0x96>
 80044fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	3b00      	subs	r3, #0
 8004504:	bf18      	it	ne
 8004506:	2301      	movne	r3, #1
 8004508:	0692      	lsls	r2, r2, #26
 800450a:	d42b      	bmi.n	8004564 <_printf_common+0xb0>
 800450c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004510:	4641      	mov	r1, r8
 8004512:	4638      	mov	r0, r7
 8004514:	47c8      	blx	r9
 8004516:	3001      	adds	r0, #1
 8004518:	d01e      	beq.n	8004558 <_printf_common+0xa4>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	6922      	ldr	r2, [r4, #16]
 800451e:	f003 0306 	and.w	r3, r3, #6
 8004522:	2b04      	cmp	r3, #4
 8004524:	bf02      	ittt	eq
 8004526:	68e5      	ldreq	r5, [r4, #12]
 8004528:	6833      	ldreq	r3, [r6, #0]
 800452a:	1aed      	subeq	r5, r5, r3
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	bf0c      	ite	eq
 8004530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004534:	2500      	movne	r5, #0
 8004536:	4293      	cmp	r3, r2
 8004538:	bfc4      	itt	gt
 800453a:	1a9b      	subgt	r3, r3, r2
 800453c:	18ed      	addgt	r5, r5, r3
 800453e:	2600      	movs	r6, #0
 8004540:	341a      	adds	r4, #26
 8004542:	42b5      	cmp	r5, r6
 8004544:	d11a      	bne.n	800457c <_printf_common+0xc8>
 8004546:	2000      	movs	r0, #0
 8004548:	e008      	b.n	800455c <_printf_common+0xa8>
 800454a:	2301      	movs	r3, #1
 800454c:	4652      	mov	r2, sl
 800454e:	4641      	mov	r1, r8
 8004550:	4638      	mov	r0, r7
 8004552:	47c8      	blx	r9
 8004554:	3001      	adds	r0, #1
 8004556:	d103      	bne.n	8004560 <_printf_common+0xac>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800455c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004560:	3501      	adds	r5, #1
 8004562:	e7c6      	b.n	80044f2 <_printf_common+0x3e>
 8004564:	18e1      	adds	r1, r4, r3
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	2030      	movs	r0, #48	@ 0x30
 800456a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800456e:	4422      	add	r2, r4
 8004570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004578:	3302      	adds	r3, #2
 800457a:	e7c7      	b.n	800450c <_printf_common+0x58>
 800457c:	2301      	movs	r3, #1
 800457e:	4622      	mov	r2, r4
 8004580:	4641      	mov	r1, r8
 8004582:	4638      	mov	r0, r7
 8004584:	47c8      	blx	r9
 8004586:	3001      	adds	r0, #1
 8004588:	d0e6      	beq.n	8004558 <_printf_common+0xa4>
 800458a:	3601      	adds	r6, #1
 800458c:	e7d9      	b.n	8004542 <_printf_common+0x8e>
	...

08004590 <_printf_i>:
 8004590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004594:	7e0f      	ldrb	r7, [r1, #24]
 8004596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004598:	2f78      	cmp	r7, #120	@ 0x78
 800459a:	4691      	mov	r9, r2
 800459c:	4680      	mov	r8, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	469a      	mov	sl, r3
 80045a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045a6:	d807      	bhi.n	80045b8 <_printf_i+0x28>
 80045a8:	2f62      	cmp	r7, #98	@ 0x62
 80045aa:	d80a      	bhi.n	80045c2 <_printf_i+0x32>
 80045ac:	2f00      	cmp	r7, #0
 80045ae:	f000 80d2 	beq.w	8004756 <_printf_i+0x1c6>
 80045b2:	2f58      	cmp	r7, #88	@ 0x58
 80045b4:	f000 80b9 	beq.w	800472a <_printf_i+0x19a>
 80045b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045c0:	e03a      	b.n	8004638 <_printf_i+0xa8>
 80045c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045c6:	2b15      	cmp	r3, #21
 80045c8:	d8f6      	bhi.n	80045b8 <_printf_i+0x28>
 80045ca:	a101      	add	r1, pc, #4	@ (adr r1, 80045d0 <_printf_i+0x40>)
 80045cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d0:	08004629 	.word	0x08004629
 80045d4:	0800463d 	.word	0x0800463d
 80045d8:	080045b9 	.word	0x080045b9
 80045dc:	080045b9 	.word	0x080045b9
 80045e0:	080045b9 	.word	0x080045b9
 80045e4:	080045b9 	.word	0x080045b9
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	080045b9 	.word	0x080045b9
 80045f0:	080045b9 	.word	0x080045b9
 80045f4:	080045b9 	.word	0x080045b9
 80045f8:	080045b9 	.word	0x080045b9
 80045fc:	0800473d 	.word	0x0800473d
 8004600:	08004667 	.word	0x08004667
 8004604:	080046f7 	.word	0x080046f7
 8004608:	080045b9 	.word	0x080045b9
 800460c:	080045b9 	.word	0x080045b9
 8004610:	0800475f 	.word	0x0800475f
 8004614:	080045b9 	.word	0x080045b9
 8004618:	08004667 	.word	0x08004667
 800461c:	080045b9 	.word	0x080045b9
 8004620:	080045b9 	.word	0x080045b9
 8004624:	080046ff 	.word	0x080046ff
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	1d1a      	adds	r2, r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6032      	str	r2, [r6, #0]
 8004630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004638:	2301      	movs	r3, #1
 800463a:	e09d      	b.n	8004778 <_printf_i+0x1e8>
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	1d19      	adds	r1, r3, #4
 8004642:	6031      	str	r1, [r6, #0]
 8004644:	0606      	lsls	r6, r0, #24
 8004646:	d501      	bpl.n	800464c <_printf_i+0xbc>
 8004648:	681d      	ldr	r5, [r3, #0]
 800464a:	e003      	b.n	8004654 <_printf_i+0xc4>
 800464c:	0645      	lsls	r5, r0, #25
 800464e:	d5fb      	bpl.n	8004648 <_printf_i+0xb8>
 8004650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004654:	2d00      	cmp	r5, #0
 8004656:	da03      	bge.n	8004660 <_printf_i+0xd0>
 8004658:	232d      	movs	r3, #45	@ 0x2d
 800465a:	426d      	negs	r5, r5
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004660:	4859      	ldr	r0, [pc, #356]	@ (80047c8 <_printf_i+0x238>)
 8004662:	230a      	movs	r3, #10
 8004664:	e011      	b.n	800468a <_printf_i+0xfa>
 8004666:	6821      	ldr	r1, [r4, #0]
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	0608      	lsls	r0, r1, #24
 800466c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004670:	d402      	bmi.n	8004678 <_printf_i+0xe8>
 8004672:	0649      	lsls	r1, r1, #25
 8004674:	bf48      	it	mi
 8004676:	b2ad      	uxthmi	r5, r5
 8004678:	2f6f      	cmp	r7, #111	@ 0x6f
 800467a:	4853      	ldr	r0, [pc, #332]	@ (80047c8 <_printf_i+0x238>)
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	bf14      	ite	ne
 8004680:	230a      	movne	r3, #10
 8004682:	2308      	moveq	r3, #8
 8004684:	2100      	movs	r1, #0
 8004686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800468a:	6866      	ldr	r6, [r4, #4]
 800468c:	60a6      	str	r6, [r4, #8]
 800468e:	2e00      	cmp	r6, #0
 8004690:	bfa2      	ittt	ge
 8004692:	6821      	ldrge	r1, [r4, #0]
 8004694:	f021 0104 	bicge.w	r1, r1, #4
 8004698:	6021      	strge	r1, [r4, #0]
 800469a:	b90d      	cbnz	r5, 80046a0 <_printf_i+0x110>
 800469c:	2e00      	cmp	r6, #0
 800469e:	d04b      	beq.n	8004738 <_printf_i+0x1a8>
 80046a0:	4616      	mov	r6, r2
 80046a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80046a6:	fb03 5711 	mls	r7, r3, r1, r5
 80046aa:	5dc7      	ldrb	r7, [r0, r7]
 80046ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046b0:	462f      	mov	r7, r5
 80046b2:	42bb      	cmp	r3, r7
 80046b4:	460d      	mov	r5, r1
 80046b6:	d9f4      	bls.n	80046a2 <_printf_i+0x112>
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d10b      	bne.n	80046d4 <_printf_i+0x144>
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	07df      	lsls	r7, r3, #31
 80046c0:	d508      	bpl.n	80046d4 <_printf_i+0x144>
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	6861      	ldr	r1, [r4, #4]
 80046c6:	4299      	cmp	r1, r3
 80046c8:	bfde      	ittt	le
 80046ca:	2330      	movle	r3, #48	@ 0x30
 80046cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80046d4:	1b92      	subs	r2, r2, r6
 80046d6:	6122      	str	r2, [r4, #16]
 80046d8:	f8cd a000 	str.w	sl, [sp]
 80046dc:	464b      	mov	r3, r9
 80046de:	aa03      	add	r2, sp, #12
 80046e0:	4621      	mov	r1, r4
 80046e2:	4640      	mov	r0, r8
 80046e4:	f7ff fee6 	bl	80044b4 <_printf_common>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d14a      	bne.n	8004782 <_printf_i+0x1f2>
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046f0:	b004      	add	sp, #16
 80046f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	f043 0320 	orr.w	r3, r3, #32
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	4833      	ldr	r0, [pc, #204]	@ (80047cc <_printf_i+0x23c>)
 8004700:	2778      	movs	r7, #120	@ 0x78
 8004702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	6831      	ldr	r1, [r6, #0]
 800470a:	061f      	lsls	r7, r3, #24
 800470c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004710:	d402      	bmi.n	8004718 <_printf_i+0x188>
 8004712:	065f      	lsls	r7, r3, #25
 8004714:	bf48      	it	mi
 8004716:	b2ad      	uxthmi	r5, r5
 8004718:	6031      	str	r1, [r6, #0]
 800471a:	07d9      	lsls	r1, r3, #31
 800471c:	bf44      	itt	mi
 800471e:	f043 0320 	orrmi.w	r3, r3, #32
 8004722:	6023      	strmi	r3, [r4, #0]
 8004724:	b11d      	cbz	r5, 800472e <_printf_i+0x19e>
 8004726:	2310      	movs	r3, #16
 8004728:	e7ac      	b.n	8004684 <_printf_i+0xf4>
 800472a:	4827      	ldr	r0, [pc, #156]	@ (80047c8 <_printf_i+0x238>)
 800472c:	e7e9      	b.n	8004702 <_printf_i+0x172>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	f023 0320 	bic.w	r3, r3, #32
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	e7f6      	b.n	8004726 <_printf_i+0x196>
 8004738:	4616      	mov	r6, r2
 800473a:	e7bd      	b.n	80046b8 <_printf_i+0x128>
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	6825      	ldr	r5, [r4, #0]
 8004740:	6961      	ldr	r1, [r4, #20]
 8004742:	1d18      	adds	r0, r3, #4
 8004744:	6030      	str	r0, [r6, #0]
 8004746:	062e      	lsls	r6, r5, #24
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	d501      	bpl.n	8004750 <_printf_i+0x1c0>
 800474c:	6019      	str	r1, [r3, #0]
 800474e:	e002      	b.n	8004756 <_printf_i+0x1c6>
 8004750:	0668      	lsls	r0, r5, #25
 8004752:	d5fb      	bpl.n	800474c <_printf_i+0x1bc>
 8004754:	8019      	strh	r1, [r3, #0]
 8004756:	2300      	movs	r3, #0
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	4616      	mov	r6, r2
 800475c:	e7bc      	b.n	80046d8 <_printf_i+0x148>
 800475e:	6833      	ldr	r3, [r6, #0]
 8004760:	1d1a      	adds	r2, r3, #4
 8004762:	6032      	str	r2, [r6, #0]
 8004764:	681e      	ldr	r6, [r3, #0]
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	2100      	movs	r1, #0
 800476a:	4630      	mov	r0, r6
 800476c:	f7fb fd38 	bl	80001e0 <memchr>
 8004770:	b108      	cbz	r0, 8004776 <_printf_i+0x1e6>
 8004772:	1b80      	subs	r0, r0, r6
 8004774:	6060      	str	r0, [r4, #4]
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	2300      	movs	r3, #0
 800477c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004780:	e7aa      	b.n	80046d8 <_printf_i+0x148>
 8004782:	6923      	ldr	r3, [r4, #16]
 8004784:	4632      	mov	r2, r6
 8004786:	4649      	mov	r1, r9
 8004788:	4640      	mov	r0, r8
 800478a:	47d0      	blx	sl
 800478c:	3001      	adds	r0, #1
 800478e:	d0ad      	beq.n	80046ec <_printf_i+0x15c>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	079b      	lsls	r3, r3, #30
 8004794:	d413      	bmi.n	80047be <_printf_i+0x22e>
 8004796:	68e0      	ldr	r0, [r4, #12]
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	4298      	cmp	r0, r3
 800479c:	bfb8      	it	lt
 800479e:	4618      	movlt	r0, r3
 80047a0:	e7a6      	b.n	80046f0 <_printf_i+0x160>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4632      	mov	r2, r6
 80047a6:	4649      	mov	r1, r9
 80047a8:	4640      	mov	r0, r8
 80047aa:	47d0      	blx	sl
 80047ac:	3001      	adds	r0, #1
 80047ae:	d09d      	beq.n	80046ec <_printf_i+0x15c>
 80047b0:	3501      	adds	r5, #1
 80047b2:	68e3      	ldr	r3, [r4, #12]
 80047b4:	9903      	ldr	r1, [sp, #12]
 80047b6:	1a5b      	subs	r3, r3, r1
 80047b8:	42ab      	cmp	r3, r5
 80047ba:	dcf2      	bgt.n	80047a2 <_printf_i+0x212>
 80047bc:	e7eb      	b.n	8004796 <_printf_i+0x206>
 80047be:	2500      	movs	r5, #0
 80047c0:	f104 0619 	add.w	r6, r4, #25
 80047c4:	e7f5      	b.n	80047b2 <_printf_i+0x222>
 80047c6:	bf00      	nop
 80047c8:	08004f39 	.word	0x08004f39
 80047cc:	08004f4a 	.word	0x08004f4a

080047d0 <__sflush_r>:
 80047d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d8:	0716      	lsls	r6, r2, #28
 80047da:	4605      	mov	r5, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	d454      	bmi.n	800488a <__sflush_r+0xba>
 80047e0:	684b      	ldr	r3, [r1, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dc02      	bgt.n	80047ec <__sflush_r+0x1c>
 80047e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dd48      	ble.n	800487e <__sflush_r+0xae>
 80047ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047ee:	2e00      	cmp	r6, #0
 80047f0:	d045      	beq.n	800487e <__sflush_r+0xae>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047f8:	682f      	ldr	r7, [r5, #0]
 80047fa:	6a21      	ldr	r1, [r4, #32]
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	d030      	beq.n	8004862 <__sflush_r+0x92>
 8004800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	0759      	lsls	r1, r3, #29
 8004806:	d505      	bpl.n	8004814 <__sflush_r+0x44>
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800480e:	b10b      	cbz	r3, 8004814 <__sflush_r+0x44>
 8004810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004818:	6a21      	ldr	r1, [r4, #32]
 800481a:	4628      	mov	r0, r5
 800481c:	47b0      	blx	r6
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	d106      	bne.n	8004832 <__sflush_r+0x62>
 8004824:	6829      	ldr	r1, [r5, #0]
 8004826:	291d      	cmp	r1, #29
 8004828:	d82b      	bhi.n	8004882 <__sflush_r+0xb2>
 800482a:	4a2a      	ldr	r2, [pc, #168]	@ (80048d4 <__sflush_r+0x104>)
 800482c:	410a      	asrs	r2, r1
 800482e:	07d6      	lsls	r6, r2, #31
 8004830:	d427      	bmi.n	8004882 <__sflush_r+0xb2>
 8004832:	2200      	movs	r2, #0
 8004834:	6062      	str	r2, [r4, #4]
 8004836:	04d9      	lsls	r1, r3, #19
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	6022      	str	r2, [r4, #0]
 800483c:	d504      	bpl.n	8004848 <__sflush_r+0x78>
 800483e:	1c42      	adds	r2, r0, #1
 8004840:	d101      	bne.n	8004846 <__sflush_r+0x76>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	b903      	cbnz	r3, 8004848 <__sflush_r+0x78>
 8004846:	6560      	str	r0, [r4, #84]	@ 0x54
 8004848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800484a:	602f      	str	r7, [r5, #0]
 800484c:	b1b9      	cbz	r1, 800487e <__sflush_r+0xae>
 800484e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004852:	4299      	cmp	r1, r3
 8004854:	d002      	beq.n	800485c <__sflush_r+0x8c>
 8004856:	4628      	mov	r0, r5
 8004858:	f7ff fb48 	bl	8003eec <_free_r>
 800485c:	2300      	movs	r3, #0
 800485e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004860:	e00d      	b.n	800487e <__sflush_r+0xae>
 8004862:	2301      	movs	r3, #1
 8004864:	4628      	mov	r0, r5
 8004866:	47b0      	blx	r6
 8004868:	4602      	mov	r2, r0
 800486a:	1c50      	adds	r0, r2, #1
 800486c:	d1c9      	bne.n	8004802 <__sflush_r+0x32>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0c6      	beq.n	8004802 <__sflush_r+0x32>
 8004874:	2b1d      	cmp	r3, #29
 8004876:	d001      	beq.n	800487c <__sflush_r+0xac>
 8004878:	2b16      	cmp	r3, #22
 800487a:	d11e      	bne.n	80048ba <__sflush_r+0xea>
 800487c:	602f      	str	r7, [r5, #0]
 800487e:	2000      	movs	r0, #0
 8004880:	e022      	b.n	80048c8 <__sflush_r+0xf8>
 8004882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004886:	b21b      	sxth	r3, r3
 8004888:	e01b      	b.n	80048c2 <__sflush_r+0xf2>
 800488a:	690f      	ldr	r7, [r1, #16]
 800488c:	2f00      	cmp	r7, #0
 800488e:	d0f6      	beq.n	800487e <__sflush_r+0xae>
 8004890:	0793      	lsls	r3, r2, #30
 8004892:	680e      	ldr	r6, [r1, #0]
 8004894:	bf08      	it	eq
 8004896:	694b      	ldreq	r3, [r1, #20]
 8004898:	600f      	str	r7, [r1, #0]
 800489a:	bf18      	it	ne
 800489c:	2300      	movne	r3, #0
 800489e:	eba6 0807 	sub.w	r8, r6, r7
 80048a2:	608b      	str	r3, [r1, #8]
 80048a4:	f1b8 0f00 	cmp.w	r8, #0
 80048a8:	dde9      	ble.n	800487e <__sflush_r+0xae>
 80048aa:	6a21      	ldr	r1, [r4, #32]
 80048ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048ae:	4643      	mov	r3, r8
 80048b0:	463a      	mov	r2, r7
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b0      	blx	r6
 80048b6:	2800      	cmp	r0, #0
 80048b8:	dc08      	bgt.n	80048cc <__sflush_r+0xfc>
 80048ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048cc:	4407      	add	r7, r0
 80048ce:	eba8 0800 	sub.w	r8, r8, r0
 80048d2:	e7e7      	b.n	80048a4 <__sflush_r+0xd4>
 80048d4:	dfbffffe 	.word	0xdfbffffe

080048d8 <_fflush_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b913      	cbnz	r3, 80048e8 <_fflush_r+0x10>
 80048e2:	2500      	movs	r5, #0
 80048e4:	4628      	mov	r0, r5
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	b118      	cbz	r0, 80048f2 <_fflush_r+0x1a>
 80048ea:	6a03      	ldr	r3, [r0, #32]
 80048ec:	b90b      	cbnz	r3, 80048f2 <_fflush_r+0x1a>
 80048ee:	f7ff f9ef 	bl	8003cd0 <__sinit>
 80048f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f3      	beq.n	80048e2 <_fflush_r+0xa>
 80048fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048fc:	07d0      	lsls	r0, r2, #31
 80048fe:	d404      	bmi.n	800490a <_fflush_r+0x32>
 8004900:	0599      	lsls	r1, r3, #22
 8004902:	d402      	bmi.n	800490a <_fflush_r+0x32>
 8004904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004906:	f7ff fae0 	bl	8003eca <__retarget_lock_acquire_recursive>
 800490a:	4628      	mov	r0, r5
 800490c:	4621      	mov	r1, r4
 800490e:	f7ff ff5f 	bl	80047d0 <__sflush_r>
 8004912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004914:	07da      	lsls	r2, r3, #31
 8004916:	4605      	mov	r5, r0
 8004918:	d4e4      	bmi.n	80048e4 <_fflush_r+0xc>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d4e1      	bmi.n	80048e4 <_fflush_r+0xc>
 8004920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004922:	f7ff fad3 	bl	8003ecc <__retarget_lock_release_recursive>
 8004926:	e7dd      	b.n	80048e4 <_fflush_r+0xc>

08004928 <__sread>:
 8004928:	b510      	push	{r4, lr}
 800492a:	460c      	mov	r4, r1
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	f000 f9c0 	bl	8004cb4 <_read_r>
 8004934:	2800      	cmp	r0, #0
 8004936:	bfab      	itete	ge
 8004938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800493a:	89a3      	ldrhlt	r3, [r4, #12]
 800493c:	181b      	addge	r3, r3, r0
 800493e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004942:	bfac      	ite	ge
 8004944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004946:	81a3      	strhlt	r3, [r4, #12]
 8004948:	bd10      	pop	{r4, pc}

0800494a <__swrite>:
 800494a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800494e:	461f      	mov	r7, r3
 8004950:	898b      	ldrh	r3, [r1, #12]
 8004952:	05db      	lsls	r3, r3, #23
 8004954:	4605      	mov	r5, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4616      	mov	r6, r2
 800495a:	d505      	bpl.n	8004968 <__swrite+0x1e>
 800495c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004960:	2302      	movs	r3, #2
 8004962:	2200      	movs	r2, #0
 8004964:	f000 f994 	bl	8004c90 <_lseek_r>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800496e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	4632      	mov	r2, r6
 8004976:	463b      	mov	r3, r7
 8004978:	4628      	mov	r0, r5
 800497a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800497e:	f000 b9ab 	b.w	8004cd8 <_write_r>

08004982 <__sseek>:
 8004982:	b510      	push	{r4, lr}
 8004984:	460c      	mov	r4, r1
 8004986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498a:	f000 f981 	bl	8004c90 <_lseek_r>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	bf15      	itete	ne
 8004994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800499a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800499e:	81a3      	strheq	r3, [r4, #12]
 80049a0:	bf18      	it	ne
 80049a2:	81a3      	strhne	r3, [r4, #12]
 80049a4:	bd10      	pop	{r4, pc}

080049a6 <__sclose>:
 80049a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049aa:	f000 b93f 	b.w	8004c2c <_close_r>

080049ae <_realloc_r>:
 80049ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b2:	4680      	mov	r8, r0
 80049b4:	4615      	mov	r5, r2
 80049b6:	460c      	mov	r4, r1
 80049b8:	b921      	cbnz	r1, 80049c4 <_realloc_r+0x16>
 80049ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049be:	4611      	mov	r1, r2
 80049c0:	f7ff b84e 	b.w	8003a60 <_malloc_r>
 80049c4:	b92a      	cbnz	r2, 80049d2 <_realloc_r+0x24>
 80049c6:	f7ff fa91 	bl	8003eec <_free_r>
 80049ca:	2400      	movs	r4, #0
 80049cc:	4620      	mov	r0, r4
 80049ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d2:	f000 f993 	bl	8004cfc <_malloc_usable_size_r>
 80049d6:	4285      	cmp	r5, r0
 80049d8:	4606      	mov	r6, r0
 80049da:	d802      	bhi.n	80049e2 <_realloc_r+0x34>
 80049dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049e0:	d8f4      	bhi.n	80049cc <_realloc_r+0x1e>
 80049e2:	4629      	mov	r1, r5
 80049e4:	4640      	mov	r0, r8
 80049e6:	f7ff f83b 	bl	8003a60 <_malloc_r>
 80049ea:	4607      	mov	r7, r0
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d0ec      	beq.n	80049ca <_realloc_r+0x1c>
 80049f0:	42b5      	cmp	r5, r6
 80049f2:	462a      	mov	r2, r5
 80049f4:	4621      	mov	r1, r4
 80049f6:	bf28      	it	cs
 80049f8:	4632      	movcs	r2, r6
 80049fa:	f7ff fa68 	bl	8003ece <memcpy>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4640      	mov	r0, r8
 8004a02:	f7ff fa73 	bl	8003eec <_free_r>
 8004a06:	463c      	mov	r4, r7
 8004a08:	e7e0      	b.n	80049cc <_realloc_r+0x1e>

08004a0a <__swbuf_r>:
 8004a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	4614      	mov	r4, r2
 8004a10:	4605      	mov	r5, r0
 8004a12:	b118      	cbz	r0, 8004a1c <__swbuf_r+0x12>
 8004a14:	6a03      	ldr	r3, [r0, #32]
 8004a16:	b90b      	cbnz	r3, 8004a1c <__swbuf_r+0x12>
 8004a18:	f7ff f95a 	bl	8003cd0 <__sinit>
 8004a1c:	69a3      	ldr	r3, [r4, #24]
 8004a1e:	60a3      	str	r3, [r4, #8]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	071a      	lsls	r2, r3, #28
 8004a24:	d501      	bpl.n	8004a2a <__swbuf_r+0x20>
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	b943      	cbnz	r3, 8004a3c <__swbuf_r+0x32>
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f82b 	bl	8004a88 <__swsetup_r>
 8004a32:	b118      	cbz	r0, 8004a3c <__swbuf_r+0x32>
 8004a34:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004a38:	4638      	mov	r0, r7
 8004a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	6922      	ldr	r2, [r4, #16]
 8004a40:	1a98      	subs	r0, r3, r2
 8004a42:	6963      	ldr	r3, [r4, #20]
 8004a44:	b2f6      	uxtb	r6, r6
 8004a46:	4283      	cmp	r3, r0
 8004a48:	4637      	mov	r7, r6
 8004a4a:	dc05      	bgt.n	8004a58 <__swbuf_r+0x4e>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7ff ff42 	bl	80048d8 <_fflush_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d1ed      	bne.n	8004a34 <__swbuf_r+0x2a>
 8004a58:	68a3      	ldr	r3, [r4, #8]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	60a3      	str	r3, [r4, #8]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	6022      	str	r2, [r4, #0]
 8004a64:	701e      	strb	r6, [r3, #0]
 8004a66:	6962      	ldr	r2, [r4, #20]
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d004      	beq.n	8004a78 <__swbuf_r+0x6e>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	07db      	lsls	r3, r3, #31
 8004a72:	d5e1      	bpl.n	8004a38 <__swbuf_r+0x2e>
 8004a74:	2e0a      	cmp	r6, #10
 8004a76:	d1df      	bne.n	8004a38 <__swbuf_r+0x2e>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f7ff ff2c 	bl	80048d8 <_fflush_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d0d9      	beq.n	8004a38 <__swbuf_r+0x2e>
 8004a84:	e7d6      	b.n	8004a34 <__swbuf_r+0x2a>
	...

08004a88 <__swsetup_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4b29      	ldr	r3, [pc, #164]	@ (8004b30 <__swsetup_r+0xa8>)
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	460c      	mov	r4, r1
 8004a92:	b118      	cbz	r0, 8004a9c <__swsetup_r+0x14>
 8004a94:	6a03      	ldr	r3, [r0, #32]
 8004a96:	b90b      	cbnz	r3, 8004a9c <__swsetup_r+0x14>
 8004a98:	f7ff f91a 	bl	8003cd0 <__sinit>
 8004a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa0:	0719      	lsls	r1, r3, #28
 8004aa2:	d422      	bmi.n	8004aea <__swsetup_r+0x62>
 8004aa4:	06da      	lsls	r2, r3, #27
 8004aa6:	d407      	bmi.n	8004ab8 <__swsetup_r+0x30>
 8004aa8:	2209      	movs	r2, #9
 8004aaa:	602a      	str	r2, [r5, #0]
 8004aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ab6:	e033      	b.n	8004b20 <__swsetup_r+0x98>
 8004ab8:	0758      	lsls	r0, r3, #29
 8004aba:	d512      	bpl.n	8004ae2 <__swsetup_r+0x5a>
 8004abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004abe:	b141      	cbz	r1, 8004ad2 <__swsetup_r+0x4a>
 8004ac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d002      	beq.n	8004ace <__swsetup_r+0x46>
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f7ff fa0f 	bl	8003eec <_free_r>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	6063      	str	r3, [r4, #4]
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	f043 0308 	orr.w	r3, r3, #8
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	b94b      	cbnz	r3, 8004b02 <__swsetup_r+0x7a>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af8:	d003      	beq.n	8004b02 <__swsetup_r+0x7a>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 f83f 	bl	8004b80 <__smakebuf_r>
 8004b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b06:	f013 0201 	ands.w	r2, r3, #1
 8004b0a:	d00a      	beq.n	8004b22 <__swsetup_r+0x9a>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60a2      	str	r2, [r4, #8]
 8004b10:	6962      	ldr	r2, [r4, #20]
 8004b12:	4252      	negs	r2, r2
 8004b14:	61a2      	str	r2, [r4, #24]
 8004b16:	6922      	ldr	r2, [r4, #16]
 8004b18:	b942      	cbnz	r2, 8004b2c <__swsetup_r+0xa4>
 8004b1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b1e:	d1c5      	bne.n	8004aac <__swsetup_r+0x24>
 8004b20:	bd38      	pop	{r3, r4, r5, pc}
 8004b22:	0799      	lsls	r1, r3, #30
 8004b24:	bf58      	it	pl
 8004b26:	6962      	ldrpl	r2, [r4, #20]
 8004b28:	60a2      	str	r2, [r4, #8]
 8004b2a:	e7f4      	b.n	8004b16 <__swsetup_r+0x8e>
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	e7f7      	b.n	8004b20 <__swsetup_r+0x98>
 8004b30:	2000016c 	.word	0x2000016c

08004b34 <__swhatbuf_r>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	460c      	mov	r4, r1
 8004b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	b096      	sub	sp, #88	@ 0x58
 8004b40:	4615      	mov	r5, r2
 8004b42:	461e      	mov	r6, r3
 8004b44:	da0d      	bge.n	8004b62 <__swhatbuf_r+0x2e>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b4c:	f04f 0100 	mov.w	r1, #0
 8004b50:	bf14      	ite	ne
 8004b52:	2340      	movne	r3, #64	@ 0x40
 8004b54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b58:	2000      	movs	r0, #0
 8004b5a:	6031      	str	r1, [r6, #0]
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	b016      	add	sp, #88	@ 0x58
 8004b60:	bd70      	pop	{r4, r5, r6, pc}
 8004b62:	466a      	mov	r2, sp
 8004b64:	f000 f872 	bl	8004c4c <_fstat_r>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	dbec      	blt.n	8004b46 <__swhatbuf_r+0x12>
 8004b6c:	9901      	ldr	r1, [sp, #4]
 8004b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b76:	4259      	negs	r1, r3
 8004b78:	4159      	adcs	r1, r3
 8004b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b7e:	e7eb      	b.n	8004b58 <__swhatbuf_r+0x24>

08004b80 <__smakebuf_r>:
 8004b80:	898b      	ldrh	r3, [r1, #12]
 8004b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b84:	079d      	lsls	r5, r3, #30
 8004b86:	4606      	mov	r6, r0
 8004b88:	460c      	mov	r4, r1
 8004b8a:	d507      	bpl.n	8004b9c <__smakebuf_r+0x1c>
 8004b8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	2301      	movs	r3, #1
 8004b96:	6163      	str	r3, [r4, #20]
 8004b98:	b003      	add	sp, #12
 8004b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b9c:	ab01      	add	r3, sp, #4
 8004b9e:	466a      	mov	r2, sp
 8004ba0:	f7ff ffc8 	bl	8004b34 <__swhatbuf_r>
 8004ba4:	9f00      	ldr	r7, [sp, #0]
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	4639      	mov	r1, r7
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7fe ff58 	bl	8003a60 <_malloc_r>
 8004bb0:	b948      	cbnz	r0, 8004bc6 <__smakebuf_r+0x46>
 8004bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb6:	059a      	lsls	r2, r3, #22
 8004bb8:	d4ee      	bmi.n	8004b98 <__smakebuf_r+0x18>
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	f043 0302 	orr.w	r3, r3, #2
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	e7e2      	b.n	8004b8c <__smakebuf_r+0xc>
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	6020      	str	r0, [r4, #0]
 8004bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bce:	81a3      	strh	r3, [r4, #12]
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bd6:	b15b      	cbz	r3, 8004bf0 <__smakebuf_r+0x70>
 8004bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 f847 	bl	8004c70 <_isatty_r>
 8004be2:	b128      	cbz	r0, 8004bf0 <__smakebuf_r+0x70>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	431d      	orrs	r5, r3
 8004bf4:	81a5      	strh	r5, [r4, #12]
 8004bf6:	e7cf      	b.n	8004b98 <__smakebuf_r+0x18>

08004bf8 <memmove>:
 8004bf8:	4288      	cmp	r0, r1
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	eb01 0402 	add.w	r4, r1, r2
 8004c00:	d902      	bls.n	8004c08 <memmove+0x10>
 8004c02:	4284      	cmp	r4, r0
 8004c04:	4623      	mov	r3, r4
 8004c06:	d807      	bhi.n	8004c18 <memmove+0x20>
 8004c08:	1e43      	subs	r3, r0, #1
 8004c0a:	42a1      	cmp	r1, r4
 8004c0c:	d008      	beq.n	8004c20 <memmove+0x28>
 8004c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c16:	e7f8      	b.n	8004c0a <memmove+0x12>
 8004c18:	4402      	add	r2, r0
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	428a      	cmp	r2, r1
 8004c1e:	d100      	bne.n	8004c22 <memmove+0x2a>
 8004c20:	bd10      	pop	{r4, pc}
 8004c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c2a:	e7f7      	b.n	8004c1c <memmove+0x24>

08004c2c <_close_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d06      	ldr	r5, [pc, #24]	@ (8004c48 <_close_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	f7fc fdb4 	bl	80017a4 <_close>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_close_r+0x1a>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_close_r+0x1a>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200004c4 	.word	0x200004c4

08004c4c <_fstat_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d07      	ldr	r5, [pc, #28]	@ (8004c6c <_fstat_r+0x20>)
 8004c50:	2300      	movs	r3, #0
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	602b      	str	r3, [r5, #0]
 8004c5a:	f7fc fdaf 	bl	80017bc <_fstat>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d102      	bne.n	8004c68 <_fstat_r+0x1c>
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	b103      	cbz	r3, 8004c68 <_fstat_r+0x1c>
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200004c4 	.word	0x200004c4

08004c70 <_isatty_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4d06      	ldr	r5, [pc, #24]	@ (8004c8c <_isatty_r+0x1c>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	4604      	mov	r4, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	f7fc fdae 	bl	80017dc <_isatty>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_isatty_r+0x1a>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_isatty_r+0x1a>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	200004c4 	.word	0x200004c4

08004c90 <_lseek_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d07      	ldr	r5, [pc, #28]	@ (8004cb0 <_lseek_r+0x20>)
 8004c94:	4604      	mov	r4, r0
 8004c96:	4608      	mov	r0, r1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fc fda7 	bl	80017f2 <_lseek>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_lseek_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_lseek_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	200004c4 	.word	0x200004c4

08004cb4 <_read_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d07      	ldr	r5, [pc, #28]	@ (8004cd4 <_read_r+0x20>)
 8004cb8:	4604      	mov	r4, r0
 8004cba:	4608      	mov	r0, r1
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	602a      	str	r2, [r5, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7fc fd24 	bl	8001710 <_read>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_read_r+0x1e>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_read_r+0x1e>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	200004c4 	.word	0x200004c4

08004cd8 <_write_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	@ (8004cf8 <_write_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fc f9dc 	bl	80010a4 <_write>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_write_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_write_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	200004c4 	.word	0x200004c4

08004cfc <_malloc_usable_size_r>:
 8004cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d00:	1f18      	subs	r0, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bfbc      	itt	lt
 8004d06:	580b      	ldrlt	r3, [r1, r0]
 8004d08:	18c0      	addlt	r0, r0, r3
 8004d0a:	4770      	bx	lr

08004d0c <_init>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	bf00      	nop
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr

08004d18 <_fini>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr
